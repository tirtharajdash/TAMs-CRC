{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scanpy as sc\n",
    "import os\n",
    "import matplotlib\n",
    "import glob\n",
    "import re\n",
    "import cv2\n",
    "from matplotlib import pyplot as plt\n",
    "from mpl_toolkits.axes_grid1 import make_axes_locatable, axes_size\n",
    "import matplotlib.patches as patches\n",
    "import matplotlib.colors as colors\n",
    "import PIL\n",
    "import math\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "import json\n",
    "from scipy.stats import fisher_exact, ttest_ind\n",
    "from collections import Counter\n",
    "from pprint import pprint\n",
    "import pickle\n",
    "import sys\n",
    "from anndata import AnnData\n",
    "\n",
    "sys.path.append(\"/booleanfs2/sahoo/Hegemon/\")\n",
    "sys.path = [\"/booleanfs2/sahoo/BoNE/\"] + sys.path\n",
    "import StepMiner as smn\n",
    "import HegemonUtil as hu\n",
    "acolor = [\"#00CC00\", \"#D8A03D\",\"#EC008C\",\n",
    "          'cyan', \"#B741DC\", \"#808285\",\n",
    "          'blue', 'black', 'green', 'red',\n",
    "          'orange', 'brown', 'pink', 'purple']\n",
    "\n",
    "import matplotlib\n",
    "matplotlib.rcParams['pdf.fonttype'] = 42\n",
    "matplotlib.rcParams['ps.fonttype'] = 42\n",
    "\n",
    "try:\n",
    "    reload  # Python 2.7\n",
    "except NameError:\n",
    "    try:\n",
    "        from importlib import reload  # Python 3.4+\n",
    "    except ImportError:\n",
    "        from imp import reload  # Python 3.0 - 3.3\n",
    "\n",
    "import bone\n",
    "reload(bone)\n",
    "\n",
    "\n",
    "class IMMAnalysis(bone.IBDAnalysis):\n",
    "\n",
    "    def __init__(self):\n",
    "        bone.IBDAnalysis.__init__(self)\n",
    "\n",
    "def getSViP():\n",
    "    l1 = [bone.readList(\"covid/iav-list-1.txt\")[0:20]] # 20 gene signature\n",
    "    wt1 = [1]\n",
    "    return wt1, l1\n",
    "\n",
    "def getViP():\n",
    "    l1 = [bone.readList(\"covid/list-2.txt\")] # 166 gene signature\n",
    "    wt1 = [1]\n",
    "    return wt1, l1\n",
    "\n",
    "def getSimpleName(gene_groups, h):\n",
    "    res = []\n",
    "    for s in gene_groups:\n",
    "        s1 = set()\n",
    "        for g in s:\n",
    "            for id1 in h.getIDs(g):\n",
    "                name = h.getSimpleName(id1)\n",
    "                if name != \"\" and name != \"---\":\n",
    "                    s1.add(name)\n",
    "        res.append(s1)\n",
    "    return res\n",
    "\n",
    "def getMacGeneGroups(order = None, weight = None, debug = 1):\n",
    "    reload(hu)\n",
    "    db = hu.Database(\"/booleanfs2/sahoo/Hegemon/explore.conf\")\n",
    "    h = hu.Hegemon(db.getDataset(\"GL4\"))\n",
    "    h.init()\n",
    "    h.initPlatform()\n",
    "    h.initSurv()\n",
    "    data_item = []\n",
    "    dir1 = \"/booleanfs2/sahoo/Data/Macrophage/BN/\"\n",
    "    with open(dir1 + 'figures/path-1.json') as data_file:\n",
    "        data_item += json.load(data_file)\n",
    "    with open(dir1 + 'figures/path-0.json') as data_file:\n",
    "        l1 = json.load(data_file)\n",
    "        data_item[5] = l1[5]\n",
    "        data_item[6] = l1[6]\n",
    "    with open(dir1 + 'figures/path-2.json') as data_file:\n",
    "        data_item += json.load(data_file)\n",
    "    with open(dir1 + 'figures/path-3.json') as data_file:\n",
    "        data_item += json.load(data_file)\n",
    "    with open(dir1 + 'figures/path-4.json') as data_file:\n",
    "        data_item += json.load(data_file)\n",
    "    cfile = dir1 + \"figures/mac-net-cls.txt\"\n",
    "    if not os.path.isfile(cfile):\n",
    "        print (\"Can't open file {0} <br>\".format(cfile))\n",
    "        exit()\n",
    "    fp = open(cfile, \"r\")\n",
    "    nodelist = {}\n",
    "    nhash = {}\n",
    "    for line in fp:\n",
    "        line = line.strip();\n",
    "        ll = line.split(\"\\t\");\n",
    "        nodelist[ll[0]] = ll[2:]\n",
    "        for i in ll[2:]:\n",
    "            nhash[i] = ll[0];\n",
    "    fp.close();\n",
    "    gene_groups = []\n",
    "    for i in range(len(data_item)):\n",
    "        gene_groups.append(set())\n",
    "        gn = data_item[i][2][0][0]\n",
    "        for g in data_item[i][2]:\n",
    "            gene_groups[i].add(g[0])\n",
    "            if g[0] in nodelist:\n",
    "                for k in nodelist[g[0]]:\n",
    "                    gene_groups[i].add(k)\n",
    "        for g in data_item[i][3]:\n",
    "            gene_groups[i].add(g)\n",
    "            if g in nodelist:\n",
    "                for k in nodelist[g]:\n",
    "                    gene_groups[i].add(k)\n",
    "        if debug == 1:\n",
    "            print (i, gn, h.getSimpleName(gn), data_item[i][0], len(gene_groups[i]))\n",
    "    print([len(s) for s in gene_groups])\n",
    "    if order is None:\n",
    "        order = [1, 3, 4, 5];\n",
    "        order = [35]\n",
    "        order = [43, 44, 45];\n",
    "        order = [8, 9, 10]\n",
    "    gene_groups = [gene_groups[i] for i in order]\n",
    "    print([len(s) for s in gene_groups])\n",
    "    gene_groups = getSimpleName(gene_groups, h)\n",
    "    print([len(s) for s in gene_groups])\n",
    "    if weight is None:\n",
    "        weight = [-1, 1, 2, 3]\n",
    "        weight = [-1, -2, -3]\n",
    "        weight = [-1]\n",
    "        weight = [-1, -2, -3]\n",
    "    print (weight)\n",
    "    genes = bone.readGenes(dir1 + \"figures/cluster-names.txt\")\n",
    "    return genes, weight, gene_groups\n",
    "\n",
    "def getCls13a14a3():\n",
    "    order = [13, 14, 3]\n",
    "    wt1 = [-1, 1, 2]\n",
    "    nx = [0, 1, 4, 5, 6, 8, 9, 10, 16, 17, 19, 20, 21, 25, 28]\n",
    "    genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    return wt1, l1\n",
    "\n",
    "def getCls13():\n",
    "    order = [13]\n",
    "    wt1 = [-1]\n",
    "    nx = [0, 1, 4, 5, 6, 8, 9, 10, 16, 17, 19, 20, 21, 25, 28]\n",
    "    genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    return wt1, l1\n",
    "\n",
    "def getCls14a3():\n",
    "    order = [14, 3]\n",
    "    wt1 = [1, 2]\n",
    "    nx = [0, 1, 4, 5, 6, 8, 9, 10, 16, 17, 19, 20, 21, 25, 28]\n",
    "    genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    return wt1, l1\n",
    "\n",
    "def processOne(ana, order, wt1, ax1, ax2, id1 = None, l1=None, violin=1):\n",
    "    genes = []\n",
    "    if (l1 is None):\n",
    "        nx = [0, 1, 4, 5, 6, 8, 9, 10, 16, 17, 19, 20, 21, 25, 28]\n",
    "        sel = 2\n",
    "        genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    ana.orderData(l1, wt1)\n",
    "    if id1 is None:\n",
    "        params = {'spaceAnn': len(ana.order)/len(ana.atypes), 'tAnn': 1, 'widthAnn':1\n",
    ",\n",
    "                'genes': genes, 'ax': ax1, 'acolor': acolor}\n",
    "        ax = ana.printTitleBar(params)\n",
    "        res = ana.getROCAUC()\n",
    "        ax.text(len(ana.cval[0]), 4, res)\n",
    "        if (violin == 1):\n",
    "            params['ax'] = ax2\n",
    "            params['vert'] = 0\n",
    "            ax = ana.printViolin(None, params)\n",
    "        else:\n",
    "            ax = ana.densityPlot(ax2, acolor)\n",
    "        return ana\n",
    "    else:\n",
    "        params = {'spaceAnn': len(ana.order)/len(ana.atypes), 'tAnn': 1, 'widthAnn':1\n",
    ",\n",
    "                'genes': genes, 'acolor': acolor}\n",
    "        ax = ana.printTitleBar(params)\n",
    "        if (violin == 1):\n",
    "            ax = ana.printViolin(None, {'vert':0})\n",
    "        else:\n",
    "            ax = ana.densityPlot()\n",
    "    expr = ana.h.getExprData(id1)\n",
    "    c = [acolor[ana.aval[i]] for i in ana.order]\n",
    "    a = [ana.aval[i] for i in ana.order]\n",
    "    x = [float(expr[i]) for i in ana.order]\n",
    "    y = [ana.f_ranks[i - ana.h.start] for i in ana.order]\n",
    "    df = pd.DataFrame()\n",
    "    df['x'] = x\n",
    "    df['y'] = y\n",
    "    df['c'] = c\n",
    "    df['a'] = a\n",
    "    ax = df.plot('x', 'y', c=c, kind = 'scatter')\n",
    "    ana.addAxes(ax)\n",
    "    for i in range(len(ana.atypes)):\n",
    "        cond1 = (df['a'] == i)\n",
    "        if (sum(cond1) > 0):\n",
    "            s1 = np.max(df[cond1]['y']) - np.min(df[cond1]['y'])\n",
    "            s2 = np.max(df[cond1]['x']) - np.min(df[cond1]['x'])\n",
    "            df.loc[cond1, 'y'] += (np.mean(df[cond1]['x']) - df.loc[cond1, 'x']) * (s1+1) / (s2+1)\n",
    "            df.loc[cond1, 'x'] -= (np.mean(df[cond1]['y']) - df.loc[cond1, 'y']) * (s2+1) / (s1+1)\n",
    "    ax = df.plot('x', 'y', c=c, kind = 'scatter')\n",
    "    ana.addAxes(ax)\n",
    "    from sklearn.linear_model import LinearRegression\n",
    "    linreg = LinearRegression(normalize=True)\n",
    "    linreg.fit(np.array(df['x']).reshape(-1, 1),df['y'])\n",
    "    y_pred = linreg.predict(np.array(df['x']).reshape(-1, 1))\n",
    "    df['y1'] = (df['y'] - y_pred)\n",
    "    ax = df.plot('x', 'y1', c=c, kind = 'scatter')\n",
    "    ana.addAxes(ax)\n",
    "    ana.f_ranks = df['y1']\n",
    "    ana.i1 = [ana.order[i] for i in np.argsort(ana.f_ranks)]\n",
    "    ana.f_ranks = [0 for i in ana.h.aRange()]\n",
    "    for i in range(len(ana.order)):\n",
    "        ana.f_ranks[ana.order[i] - ana.h.start] = df['y1'][i]\n",
    "    index = np.array([i - ana.h.start for i in ana.i1])\n",
    "    ana.cval = np.array([[ana.aval[i] for i in ana.i1]])\n",
    "    ana.data = np.array([ana.expr[i] for i in ana.ind_r])[:,index]\n",
    "\n",
    "    params = {'spaceAnn': len(ana.order)/len(ana.atypes), 'tAnn': 1, 'widthAnn':1,\n",
    "                  'genes': genes, 'ax': ax1, 'acolor': acolor}\n",
    "    ax = ana.printTitleBar(params)\n",
    "    if (violin == 1):\n",
    "        params['ax'] = ax2\n",
    "        params['vert'] = 0\n",
    "        ax = ana.printViolin(None, params)\n",
    "    else:\n",
    "        ax = ana.densityPlot(ax2, acolor)\n",
    "\n",
    "    return ana\n",
    "\n",
    "def processDataHnorm(ana, id1 = None):\n",
    "    fig = plt.figure(figsize=(15,4), dpi=100)\n",
    "    plt.subplots_adjust(hspace=0.5, wspace=0.5)\n",
    "    ax1 = plt.subplot2grid((4, 3), (0, 0))\n",
    "    ax2 = plt.subplot2grid((4, 3), (1, 0), rowspan=3)\n",
    "    ax3 = plt.subplot2grid((4, 3), (0, 1))\n",
    "    ax4 = plt.subplot2grid((4, 3), (1, 1), rowspan=3)\n",
    "    ax5 = plt.subplot2grid((4, 3), (0, 2))\n",
    "    ax6 = plt.subplot2grid((4, 3), (1, 2), rowspan=3)\n",
    "    order = [13]\n",
    "    wt1 = [-1]\n",
    "    processOne(ana, order, wt1, ax1, ax2, id1)\n",
    "    order = [14, 3]\n",
    "    wt1 = [1, 2]\n",
    "    processOne(ana, order, wt1, ax3, ax4, id1)\n",
    "    order = [13, 14, 3]\n",
    "    wt1 = [-1, 1, 2]\n",
    "    processOne(ana, order, wt1, ax5, ax6, id1)\n",
    "    return fig\n",
    "\n",
    "def processDataHMm(ana, violin=1):\n",
    "    nx = [0, 1, 4, 5, 6, 8, 9, 10, 16, 17, 19, 20, 21, 25, 28]\n",
    "    sel = 2\n",
    "    order = [13]\n",
    "    wt1 = [-1]\n",
    "    genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    ana.convertMm(l1, genes)\n",
    "    ana.orderData(ana.gene_groups, wt1)\n",
    "    print(\" \".join([str(ana.atype[i]) for i in ana.i1]))\n",
    "    #ana.normMacrophageGene(\"TYROBP\", {\"thr\":1})\n",
    "    #ana.normMacrophageGene(\"FCER1G\", {\"thr\":3, \"tval\":6.5, \"select\":sel})\n",
    "    print(len(ana.col_labels), len(ana.row_ids))\n",
    "    fig = plt.figure(figsize=(15,4), dpi=100)\n",
    "    plt.subplots_adjust(hspace=0.5, wspace=0.5)\n",
    "    ax = plt.subplot2grid((4, 3), (0, 0))\n",
    "    params = {'spaceAnn': len(ana.order)/len(ana.atypes), 'tAnn': 1, 'widthAnn':1,\n",
    "              'genes': genes, 'ax': ax, 'acolor': acolor}\n",
    "    ax = ana.printTitleBar(params)\n",
    "    res = ana.getMetrics(ana.cval[0])\n",
    "    ax.text(len(ana.cval[0]), 4, \",\".join(res))\n",
    "    ax = plt.subplot2grid((4, 3), (1, 0), rowspan=3)\n",
    "    ax2 = plt.subplot2grid((4, 3), (0, 1))\n",
    "    ax3 = plt.subplot2grid((4, 3), (1, 1), rowspan=3)\n",
    "    if (violin == 1):\n",
    "        params['ax'] = ax\n",
    "        params['vert'] = 0\n",
    "        ax = ana.printViolin(None, params)\n",
    "        ax.set_ylabel(\"Violin - Cluster \\\\#13\")\n",
    "    else:\n",
    "        ax = ana.densityPlot(ax, acolor)\n",
    "        ax.set_ylabel(\"Density - Cluster \\\\#13\")\n",
    "    #plt.tight_layout()\n",
    "    order = [14, 3]\n",
    "    wt1 = [1, 2]\n",
    "    genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    ana.convertMm(l1, genes)\n",
    "    ana.orderData(ana.gene_groups, wt1)\n",
    "    print(\" \".join([str(ana.atype[i]) for i in ana.i1]))\n",
    "    #ana.normMacrophageGene(\"TYROBP\", {\"thr\":1})\n",
    "    #ana.normMacrophageGene(\"FCER1G\", {\"thr\":3, \"tval\":6.5, \"select\":sel})\n",
    "    print(len(ana.col_labels), len(ana.row_ids))\n",
    "    params.update({'ax':ax2})\n",
    "    ax = ana.printTitleBar(params)\n",
    "    res = ana.getMetrics(ana.cval[0])\n",
    "    ax.text(len(ana.cval[0]), 4, \",\".join(res))\n",
    "    if (violin == 1):\n",
    "        params['ax'] = ax3\n",
    "        params['vert'] = 0\n",
    "        ax = ana.printViolin(None, params)\n",
    "        ax.set_ylabel(\"Violin - Cluster \\\\#14-3\")\n",
    "    else:\n",
    "        ax = ana.densityPlot(ax3, acolor)\n",
    "        ax.set_ylabel(\"Density - Cluster \\\\#14-3\")\n",
    "    ax2 = plt.subplot2grid((4, 3), (0, 2))\n",
    "    ax3 = plt.subplot2grid((4, 3), (1, 2), rowspan=3)\n",
    "    order = [13, 14, 3]\n",
    "    wt1 = [-1, 1, 2]\n",
    "    genes, wt1, l1 = getMacGeneGroups([nx[i] for i in order], wt1, 0)\n",
    "    ana.convertMm(l1, genes)\n",
    "    ana.orderData(ana.gene_groups, wt1)\n",
    "    print(\" \".join([str(ana.atype[i]) for i in ana.i1]))\n",
    "    #ana.normMacrophageGene(\"TYROBP\", {\"thr\":1})\n",
    "    #ana.normMacrophageGene(\"FCER1G\", {\"thr\":3, \"tval\":6.5, \"select\":sel})\n",
    "    print(len(ana.col_labels), len(ana.row_ids))\n",
    "    params.update({'ax':ax2})\n",
    "    ax = ana.printTitleBar(params)\n",
    "    res = ana.getMetrics(ana.cval[0])\n",
    "    ax.text(len(ana.cval[0]), 4, \",\".join(res))\n",
    "    if (violin == 1):\n",
    "        params['ax'] = ax3\n",
    "        params['vert'] = 0\n",
    "        ax = ana.printViolin(None, params)\n",
    "        ax.set_ylabel(\"Violin - Cluster \\\\#13-14-3\")\n",
    "    else:\n",
    "        ax = ana.densityPlot(ax3, acolor)\n",
    "        ax.set_ylabel(\"Density - Cluster \\\\#13-14-3\")\n",
    "    return fig\n",
    "\n",
    "def getHigh(ana, tn=0, thr=2.0, nthr=10):\n",
    "    order = [i for i in ana.order if ana.aval[i] == tn]\n",
    "    fp = ana.h.fp;\n",
    "    fp.seek(0, 0);\n",
    "    h = fp.readline();\n",
    "    res = []\n",
    "    index = 0\n",
    "    for line in fp:\n",
    "        line = line.strip();\n",
    "        ll = line.split(\"\\t\")\n",
    "        l1 = [i for i in order if i < len(ll) and\n",
    "              ll[i] != '' and float(ll[i]) > thr]\n",
    "        if len(l1) > nthr:\n",
    "            res.append([ll[0], ana.h.getSimpleName(ll[0]), len(l1)])\n",
    "        index += 1\n",
    "        if (index % 1000) == 0:\n",
    "            print(index)\n",
    "    return res\n",
    "\n",
    "def getHighJava(ana, tn=0, thr=2.0, nthr=10):\n",
    "    order = [i for i in ana.order if ana.aval[i] == tn]\n",
    "    ofh = open(\".arrorder\", \"w\")\n",
    "    for i in order:\n",
    "        ofh.write(ana.headers[i] + \"\\n\")\n",
    "    ofh.close()\n",
    "    from subprocess import check_output\n",
    "    cmd = ['java', '-cp', '/booleanfs2/sahoo/Hegemon',\n",
    "           'tools.Hegemon', 'high', ana.h.getPre(),\n",
    "           '.arrorder', str(thr), str(nthr)]\n",
    "    result = check_output(cmd, input='')\n",
    "    l1 = result.decode('utf-8').split('\\n')\n",
    "    res = [k.split('\\t') for k in l1 if k != '']\n",
    "    res = [[k[0], ana.h.getSimpleName(k[0]), k[1]] for k in res]\n",
    "    return res\n",
    "\n",
    "def getCls14a3v2():\n",
    "    l1 = [['RPS16', 'RPS21', 'RPL6', 'CCDC88A', 'RPL3', 'RPS15A', 'RPL14',\n",
    "        'PCBP2', 'RPL23', 'RPL13', 'METTL7A'],\n",
    "        ['CLEC10A', 'ANXA4', 'UBL3', 'RPS21', 'RPL6', 'RPS15A', 'ARL4C',\n",
    "            'RPL14', 'HEXA', 'METTL7A', 'RPS16']]\n",
    "    l1 = [['RPL24', 'NACA', 'RPS16', 'RPS21', 'RPL6', 'CCDC88A',\n",
    "        'RPL3', 'RPS15A', 'EEF1B2', 'RPL14', 'PCBP2', 'RPL23',\n",
    "        'RPL13', 'METTL7A', 'EEF2'],\n",
    "        ['CLEC10A', 'INPP5A', 'NACA', 'ANXA4', 'UBL3', 'RPS21',\n",
    "            'ITSN1', 'RPL24', 'RPS15A', 'ARL4C', 'RPL14', 'RPL6',\n",
    "            'HEXA', 'METTL7A', 'EEF2', 'RPS16']]\n",
    "    wt1 = [1, 2]\n",
    "    return wt1, l1\n",
    "\n",
    "bone.getCls13 = getCls13\n",
    "bone.getCls14a3 = getCls14a3\n",
    "bone.getCls13a14a3 = getCls13a14a3\n",
    "bone.getCls14a3v2 = getCls14a3v2\n",
    "\n",
    "def getIDhash(adata):\n",
    "    idhash = {}\n",
    "    for i in range(len(adata.raw.var['gene_symbols'])):\n",
    "        k = adata.raw.var['gene_symbols'][i]\n",
    "        v = adata.raw.var['gene_ids'][i]\n",
    "        if k not in idhash:\n",
    "            idhash[k] = []\n",
    "        idhash[k] += [v]\n",
    "    return idhash\n",
    "\n",
    "def getRanks3(gene_groups, adata):\n",
    "    idhash = getIDhash(adata)\n",
    "    expr = []\n",
    "    row_labels = []\n",
    "    row_ids = []\n",
    "    row_numhi = []\n",
    "    ranks = []\n",
    "    g_ind = 0\n",
    "    counts = []\n",
    "    for s in gene_groups:\n",
    "        count = 0\n",
    "        avgrank = [0] * adata.raw.n_obs\n",
    "        for gn in s:\n",
    "            if gn not in idhash:\n",
    "                continue\n",
    "            e = adata.raw.obs_vector(gn)\n",
    "            v = e\n",
    "            if (np.max(v) - np.min(v)) <= 0:\n",
    "                continue\n",
    "            t = hu.getThrData(v)\n",
    "            te = []\n",
    "            for i in range(len(e)):\n",
    "                if e[i] == \"\":\n",
    "                    v1 = - t[3] / 3;\n",
    "                else:\n",
    "                    v1 = (float(e[i]) - t[3]) / 3;\n",
    "                if np.std(v) > 0:\n",
    "                    v1 = v1 / np.std(v)\n",
    "                avgrank[i] += v1\n",
    "                te.append(v1)\n",
    "            expr.append(te)\n",
    "            row_labels.append(gn)\n",
    "            row_ids.append(idhash[gn][0])\n",
    "            v1 = [g_ind, sum(v > t[3])]\n",
    "            if g_ind > 3:\n",
    "                v1 = [g_ind, sum(v <= t[3])]\n",
    "            else:\n",
    "                v1 = [g_ind, sum(v > t[3])]\n",
    "            row_numhi.append(v1)\n",
    "            count += 1\n",
    "            #if count > 200:\n",
    "            #    break\n",
    "        ranks.append(avgrank)\n",
    "        g_ind += 1\n",
    "        counts += [count]\n",
    "    print (counts)\n",
    "    return ranks, row_labels, row_ids, row_numhi, expr\n",
    "def computeSMART(adata, org='Hs'):\n",
    "    wt1, l1 = bone.getCls13()\n",
    "    if org is 'Mm':\n",
    "        l1 = bone.getGroupsMm(l1)\n",
    "    ranks, row_labels, row_ids, row_numhi, expr = getRanks3(l1, adata)\n",
    "    f_ranks = bone.mergeRanks(range(adata.raw.n_obs), 0, ranks, wt1)\n",
    "    adata.obs['c13'] = f_ranks\n",
    "\n",
    "    wt1, l1 = bone.getCls14a3()\n",
    "    if org is 'Mm':\n",
    "        l1 = bone.getGroupsMm(l1)\n",
    "    ranks, row_labels, row_ids, row_numhi, expr = getRanks3(l1, adata)\n",
    "    f_ranks = bone.mergeRanks(range(adata.raw.n_obs), 0, ranks, wt1)\n",
    "    adata.obs['c14_3'] = f_ranks\n",
    "    adata.obs['c14'] = ranks[0]\n",
    "    adata.obs['c3'] = ranks[1]\n",
    "    return adata\n",
    "def computeSMARTv2(adata, org='Hs'):\n",
    "    wt1, l1 = bone.getCls13()\n",
    "    if org is 'Mm':\n",
    "        l1 = bone.getGroupsMm(l1)\n",
    "    ranks, row_labels, row_ids, row_numhi, expr = getRanks3(l1, adata)\n",
    "    f_ranks = bone.mergeRanks(range(adata.raw.n_obs), 0, ranks, wt1)\n",
    "    adata.obs['c13'] = f_ranks\n",
    "\n",
    "    wt1, l1 = bone.getCls14a3v2()\n",
    "    if org is 'Mm':\n",
    "        l1 = bone.getGroupsMm(l1)\n",
    "    ranks, row_labels, row_ids, row_numhi, expr = getRanks3(l1, adata)\n",
    "    f_ranks = bone.mergeRanks(range(adata.raw.n_obs), 0, ranks, wt1)\n",
    "    adata.obs['c14_3'] = f_ranks\n",
    "    adata.obs['c14'] = ranks[0]\n",
    "    adata.obs['c3'] = ranks[1]\n",
    "    return adata\n",
    "def convertString(data):\n",
    "    for k in data.obs.columns:\n",
    "        data.obs[k] = [k.decode('utf-8') if type(k) == bytes else k for k in data.obs[k]]\n",
    "    for k in data.var.columns:\n",
    "        data.var[k] = [k.decode('utf-8') if type(k) == bytes else k for k in data.var[k]]\n",
    "    data.var_names = list(data.var['gene_symbols'])\n",
    "    data.var_names_make_unique()\n",
    "    data.obs_names = [k.decode('utf-8') if type(k) == bytes else k for k in data.obs_names]\n",
    "    return data\n",
    "def scatterPlot(data, gA, gB, col=\"red\"):\n",
    "    plotdf = sc.get.obs_df(data, keys=[gA, gB])\n",
    "    return plotdf.plot.scatter(gA, gB, c=col)\n",
    "def computePCAandUMAP(adata):\n",
    "    sc.pp.filter_cells(adata, min_genes=200)\n",
    "    sc.pp.filter_genes(adata, min_cells=3)\n",
    "    sc.pl.highest_expr_genes(adata, n_top=20)\n",
    "    sc.pp.highly_variable_genes(adata, min_mean=0.01, max_mean=5, min_disp=0.5)\n",
    "    sc.pl.highly_variable_genes(adata)\n",
    "    adata = adata[:, adata.var.highly_variable]\n",
    "    sc.tl.pca(adata, svd_solver='arpack')\n",
    "    sc.pl.pca_variance_ratio(adata, log=True)\n",
    "    sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)\n",
    "    sc.tl.umap(adata)\n",
    "    sc.tl.leiden(adata)\n",
    "    return adata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904234_Patient0_carcinoma_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904235_Patient1_adenoma_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904236_Patient1_carcinoma_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904237_Patient1_normal_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904238_Patient2_adenoma_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904239_Patient2_carcinoma_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904240_Patient2_normal_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904241_Patient2_para-cancer_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904242_Patient3_adenoma_1_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904243_Patient3_adenoma_2_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904244_Patient3_blood_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904245_Patient3_carcinoma_matrix.mtx.gz',\n",
       " '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904246_Patient3_normal_matrix.mtx.gz']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path = '/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/'\n",
    "mylist = [f for f in glob.glob(path + \"*matrix.mtx.gz\")]\n",
    "mylist.sort()\n",
    "mylist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2947\n",
      "4118\n",
      "3862\n",
      "3868\n",
      "4383\n",
      "7452\n",
      "7549\n",
      "4812\n",
      "4137\n",
      "2657\n",
      "2185\n",
      "2628\n",
      "4184\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "54782"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NumCells=!ls /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/*barcodes* | while read line; do gunzip -c $line | wc -l; done;\n",
    "sum_cnt = 0\n",
    "for i in NumCells:\n",
    "    print(i)\n",
    "    sum_cnt += int(i)\n",
    "sum_cnt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904234_Patient0_carcinoma_matrix.mtx.gz:\n",
      "gsmid:GSM4904234\n",
      "index:0\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904234_Patient0_carcinoma_matrix.mtx.gz GSM4904234\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904234_Patient0_carcinoma_\n",
      "data:AnnData object with n_obs × n_vars = 2947 × 33538\n",
      "Column start index: 0\n",
      "No of files processed: 1\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904235_Patient1_adenoma_matrix.mtx.gz:\n",
      "gsmid:GSM4904235\n",
      "index:1\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904235_Patient1_adenoma_matrix.mtx.gz GSM4904235\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904235_Patient1_adenoma_\n",
      "data:AnnData object with n_obs × n_vars = 4118 × 33538\n",
      "Column start index: 2947\n",
      "No of files processed: 2\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904236_Patient1_carcinoma_matrix.mtx.gz:\n",
      "gsmid:GSM4904236\n",
      "index:2\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904236_Patient1_carcinoma_matrix.mtx.gz GSM4904236\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904236_Patient1_carcinoma_\n",
      "data:AnnData object with n_obs × n_vars = 3862 × 33538\n",
      "Column start index: 7065\n",
      "No of files processed: 3\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904237_Patient1_normal_matrix.mtx.gz:\n",
      "gsmid:GSM4904237\n",
      "index:3\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904237_Patient1_normal_matrix.mtx.gz GSM4904237\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904237_Patient1_normal_\n",
      "data:AnnData object with n_obs × n_vars = 3868 × 33538\n",
      "Column start index: 10927\n",
      "No of files processed: 4\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904238_Patient2_adenoma_matrix.mtx.gz:\n",
      "gsmid:GSM4904238\n",
      "index:4\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904238_Patient2_adenoma_matrix.mtx.gz GSM4904238\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904238_Patient2_adenoma_\n",
      "data:AnnData object with n_obs × n_vars = 4383 × 33538\n",
      "Column start index: 14795\n",
      "No of files processed: 5\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904239_Patient2_carcinoma_matrix.mtx.gz:\n",
      "gsmid:GSM4904239\n",
      "index:5\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904239_Patient2_carcinoma_matrix.mtx.gz GSM4904239\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904239_Patient2_carcinoma_\n",
      "data:AnnData object with n_obs × n_vars = 7452 × 33538\n",
      "Column start index: 19178\n",
      "No of files processed: 6\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904240_Patient2_normal_matrix.mtx.gz:\n",
      "gsmid:GSM4904240\n",
      "index:6\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904240_Patient2_normal_matrix.mtx.gz GSM4904240\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904240_Patient2_normal_\n",
      "data:AnnData object with n_obs × n_vars = 7549 × 33538\n",
      "Column start index: 26630\n",
      "No of files processed: 7\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904241_Patient2_para-cancer_matrix.mtx.gz:\n",
      "gsmid:GSM4904241\n",
      "index:7\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904241_Patient2_para-cancer_matrix.mtx.gz GSM4904241\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904241_Patient2_para-cancer_\n",
      "data:AnnData object with n_obs × n_vars = 4812 × 33538\n",
      "Column start index: 34179\n",
      "No of files processed: 8\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904242_Patient3_adenoma_1_matrix.mtx.gz:\n",
      "gsmid:GSM4904242\n",
      "index:8\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904242_Patient3_adenoma_1_matrix.mtx.gz GSM4904242\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904242_Patient3_adenoma_1_\n",
      "data:AnnData object with n_obs × n_vars = 4137 × 33538\n",
      "Column start index: 38991\n",
      "No of files processed: 9\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904243_Patient3_adenoma_2_matrix.mtx.gz:\n",
      "gsmid:GSM4904243\n",
      "index:9\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904243_Patient3_adenoma_2_matrix.mtx.gz GSM4904243\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904243_Patient3_adenoma_2_\n",
      "data:AnnData object with n_obs × n_vars = 2657 × 33538\n",
      "Column start index: 43128\n",
      "No of files processed: 10\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904244_Patient3_blood_matrix.mtx.gz:\n",
      "gsmid:GSM4904244\n",
      "index:10\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904244_Patient3_blood_matrix.mtx.gz GSM4904244\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904244_Patient3_blood_\n",
      "data:AnnData object with n_obs × n_vars = 2185 × 33538\n",
      "Column start index: 45785\n",
      "No of files processed: 11\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904245_Patient3_carcinoma_matrix.mtx.gz:\n",
      "gsmid:GSM4904245\n",
      "index:11\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904245_Patient3_carcinoma_matrix.mtx.gz GSM4904245\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904245_Patient3_carcinoma_\n",
      "data:AnnData object with n_obs × n_vars = 2628 × 33538\n",
      "Column start index: 47970\n",
      "No of files processed: 12\n",
      "Working on /booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904246_Patient3_normal_matrix.mtx.gz:\n",
      "gsmid:GSM4904246\n",
      "index:12\n",
      "/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904246_Patient3_normal_matrix.mtx.gz GSM4904246\n",
      "pre:/booleanfs2/sahoo/Data/Colon/Cancer/GSE161277/data/GSM4904246_Patient3_normal_\n",
      "data:AnnData object with n_obs × n_vars = 4184 × 33538\n",
      "Column start index: 50598\n",
      "No of files processed: 13\n"
     ]
    }
   ],
   "source": [
    "adata = None\n",
    "sizes = []\n",
    "samples = []\n",
    "index = 0\n",
    "\n",
    "#single cell empty matrix\n",
    "sc_mat = np.zeros((33538,sum_cnt)) #number of samples, number of cells [barcodes]\n",
    "\n",
    "col_idx = 0\n",
    "\n",
    "for f in mylist:\n",
    "    print(f\"Working on {f}:\")\n",
    "    gsmid = re.sub(\".*(GSM[0-9]+).*.\", \"\\\\1\", f)\n",
    "    print(f'gsmid:{gsmid}')\n",
    "    print(f'index:{index}')\n",
    "    print(f, gsmid)\n",
    "    pre = re.sub(\"matrix.mtx.gz\", \"\", f)\n",
    "    print(f\"pre:{pre}\")\n",
    "    data = sc.read_mtx(f, dtype='float32').T\n",
    "    print(f'data:{data}')\n",
    "    sc_data = data\n",
    "    \n",
    "    \"\"\"\n",
    "    #bulk counts\n",
    "    features = pd.read_csv(pre+'features.tsv.gz', sep=\"\\t\", header=None)\n",
    "    barcodes = pd.read_csv(pre+'barcodes.tsv.gz', sep=\"\\t\", header=None)  \n",
    "    data.var_names = features[0].values\n",
    "    data.obs_names = barcodes[0].values\n",
    "    data.var['gene_symbols'] = features[1].values\n",
    "    data.var['gene_ids'] = features[0].values\n",
    "    print(f'data.X.sum(axis=0):{data.X.sum(axis=0)}')\n",
    "    x = np.atleast_2d(data.X.sum(axis=0))\n",
    "    print(f'x:{x}')\n",
    "    print(f'shape(x):{np.shape(x)}')\n",
    "    data = sc.AnnData(x, var=data.var, dtype=x.dtype)\n",
    "    print(f'data:{data}')\n",
    "    sizes += [data.shape]\n",
    "    samples += [gsmid]\n",
    "    if adata is None:\n",
    "        adata = data\n",
    "    else:\n",
    "        adata = adata.concatenate(data, batch_key='sample')\n",
    "    print(f'adata:{adata}')\n",
    "    \"\"\"  \n",
    "    \n",
    "    #update the single cell matrix \n",
    "    c = sc_data.X.tocoo()\n",
    "    \n",
    "    if index:\n",
    "        col_idx += int(NumCells[index-1])\n",
    "    \n",
    "    print(f'Column start index: {col_idx}')\n",
    "    \n",
    "    index += 1\n",
    "    print(f'No of files processed: {index}')\n",
    "    \n",
    "    sc_mat[c.col, c.row+col_idx] = c.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000243485</td>\n",
       "      <td>MIR1302-2HG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000237613</td>\n",
       "      <td>FAM138A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000186092</td>\n",
       "      <td>OR4F5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000238009</td>\n",
       "      <td>AL627309.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000239945</td>\n",
       "      <td>AL627309.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>ENSG00000277856</td>\n",
       "      <td>AC233755.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>ENSG00000275063</td>\n",
       "      <td>AC233755.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>ENSG00000271254</td>\n",
       "      <td>AC240274.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>ENSG00000277475</td>\n",
       "      <td>AC213203.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>ENSG00000268674</td>\n",
       "      <td>FAM231C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     0            1\n",
       "0      ENSG00000243485  MIR1302-2HG\n",
       "1      ENSG00000237613      FAM138A\n",
       "2      ENSG00000186092        OR4F5\n",
       "3      ENSG00000238009   AL627309.1\n",
       "4      ENSG00000239945   AL627309.3\n",
       "...                ...          ...\n",
       "33533  ENSG00000277856   AC233755.2\n",
       "33534  ENSG00000275063   AC233755.1\n",
       "33535  ENSG00000271254   AC240274.1\n",
       "33536  ENSG00000277475   AC213203.1\n",
       "33537  ENSG00000268674      FAM231C\n",
       "\n",
       "[33538 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read the genes from (any) features/genes.tsv file\n",
    "first_file = re.sub(\"matrix.mtx.gz\", \"\", mylist[0])\n",
    "features = pd.read_csv(first_file+'features.tsv.gz', sep=\"\\t\", header=None, usecols=[0,1])\n",
    "features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/anndata/_core/anndata.py:119: ImplicitModificationWarning: Transforming to str index.\n",
      "  warnings.warn(\"Transforming to str index.\", ImplicitModificationWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ProbeId</th>\n",
       "      <th>Name</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>...</th>\n",
       "      <th>54772</th>\n",
       "      <th>54773</th>\n",
       "      <th>54774</th>\n",
       "      <th>54775</th>\n",
       "      <th>54776</th>\n",
       "      <th>54777</th>\n",
       "      <th>54778</th>\n",
       "      <th>54779</th>\n",
       "      <th>54780</th>\n",
       "      <th>54781</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000243485</td>\n",
       "      <td>MIR1302-2HG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000237613</td>\n",
       "      <td>FAM138A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000186092</td>\n",
       "      <td>OR4F5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000238009</td>\n",
       "      <td>AL627309.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000239945</td>\n",
       "      <td>AL627309.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>ENSG00000277856</td>\n",
       "      <td>AC233755.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>ENSG00000275063</td>\n",
       "      <td>AC233755.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>ENSG00000271254</td>\n",
       "      <td>AC240274.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>ENSG00000277475</td>\n",
       "      <td>AC213203.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>ENSG00000268674</td>\n",
       "      <td>FAM231C</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 54784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               ProbeId         Name    0    1    2    3    4    5    6    7  \\\n",
       "0      ENSG00000243485  MIR1302-2HG  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "1      ENSG00000237613      FAM138A  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "2      ENSG00000186092        OR4F5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "3      ENSG00000238009   AL627309.1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "4      ENSG00000239945   AL627309.3  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "...                ...          ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
       "33533  ENSG00000277856   AC233755.2  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "33534  ENSG00000275063   AC233755.1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "33535  ENSG00000271254   AC240274.1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "33536  ENSG00000277475   AC213203.1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "33537  ENSG00000268674      FAM231C  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   \n",
       "\n",
       "       ...  54772  54773  54774  54775  54776  54777  54778  54779  54780  \\\n",
       "0      ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "1      ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "2      ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "3      ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "4      ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "...    ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "33533  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "33534  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "33535  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "33536  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "33537  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "\n",
       "       54781  \n",
       "0        0.0  \n",
       "1        0.0  \n",
       "2        0.0  \n",
       "3        0.0  \n",
       "4        0.0  \n",
       "...      ...  \n",
       "33533    0.0  \n",
       "33534    0.0  \n",
       "33535    0.0  \n",
       "33536    0.0  \n",
       "33537    0.0  \n",
       "\n",
       "[33538 rows x 54784 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from anndata import AnnData\n",
    "import scanpy as sc\n",
    "\n",
    "un_normalized = pd.DataFrame(sc_mat)\n",
    "adata = sc.AnnData(un_normalized)\n",
    "# sc.pp.normalize_total(adata, target_sum=1e6)\n",
    "# sc.pp.log1p(adata, base=2)\n",
    "df = pd.DataFrame(adata.X)\n",
    "\n",
    "temp_df=df\n",
    "temp_df.insert(loc = 0, column = 'ProbeId', value = features[0])\n",
    "temp_df.insert(loc = 1, column = 'Name', value = features[1])\n",
    "temp_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_names = list(temp_df.columns)\n",
    "GSM_ids=[\"ProbeId\",\"Name\"]\n",
    "for x in column_names[2:]:\n",
    "    if x>=0 and x<=2947:\n",
    "        GSM_ids.append('GSM4904234')\n",
    "    elif int(x)>2947 and int(x)<=2947+4118:\n",
    "        GSM_ids.append('GSM4904235')\n",
    "    elif x>2947+4118 and x<=2947+4118+3862:\n",
    "        GSM_ids.append('GSM4904236')\n",
    "    elif x>2947+4118+3862 and x<=2947+4118+3862+3868:\n",
    "        GSM_ids.append('GSM4904237')\n",
    "    elif x>2947+4118+3862+3868 and x<=2947+4118+3862+3868+4383:\n",
    "        GSM_ids.append('GSM4904238')\n",
    "    elif x>2947+4118+3862+3868+4383 and x<=2947+4118+3862+3868+4383+7452:\n",
    "        GSM_ids.append('GSM4904239')\n",
    "    elif x>2947+4118+3862+3868+4383+7452 and x<=2947+4118+3862+3868+4383+7452+7549:\n",
    "        GSM_ids.append('GSM4904240')\n",
    "    elif x>2947+4118+3862+3868+4383+7452+7549 and x<=2947+4118+3862+3868+4383+7452+7549+4812:\n",
    "        GSM_ids.append('GSM4904241')\n",
    "    elif x>2947+4118+3862+3868+4383+7452+7549+4812 and x<=2947+4118+3862+3868+4383+7452+7549+4812+4137:\n",
    "        GSM_ids.append('GSM4904242')\n",
    "    elif x>2947+4118+3862+3868+4383+7452+7549+4812+4137 and x<=2947+4118+3862+3868+4383+7452+7549+4812+4137+2657:\n",
    "        GSM_ids.append('GSM4904243')\n",
    "    elif x>2947+4118+3862+3868+4383+7452+7549+4812+4137+2657 and x<=2947+4118+3862+3868+4383+7452+7549+4812+4137+2657+2185:\n",
    "        GSM_ids.append('GSM4904244')\n",
    "    elif x>2947+4118+3862+3868+4383+7452+7549+4812+4137+2657+2185 and x<=2947+4118+3862+3868+4383+7452+7549+4812+4137+2657+2185+2628:\n",
    "        GSM_ids.append('GSM4904245')\n",
    "    elif x>2947+4118+3862+3868+4383+7452+7549+4812+4137+2657+2185+2628 and x<=2947+4118+3862+3868+4383+7452+7549+4812+4137+2657+2185+2628+4184:\n",
    "        GSM_ids.append('GSM4904246')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ProbeId</th>\n",
       "      <th>Name</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>...</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000243485</td>\n",
       "      <td>MIR1302-2HG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000237613</td>\n",
       "      <td>FAM138A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000186092</td>\n",
       "      <td>OR4F5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000238009</td>\n",
       "      <td>AL627309.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000239945</td>\n",
       "      <td>AL627309.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>ENSG00000277856</td>\n",
       "      <td>AC233755.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>ENSG00000275063</td>\n",
       "      <td>AC233755.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>ENSG00000271254</td>\n",
       "      <td>AC240274.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>ENSG00000277475</td>\n",
       "      <td>AC213203.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>ENSG00000268674</td>\n",
       "      <td>FAM231C</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 54784 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               ProbeId         Name  GSM4904234  GSM4904234  GSM4904234  \\\n",
       "0      ENSG00000243485  MIR1302-2HG         0.0         0.0         0.0   \n",
       "1      ENSG00000237613      FAM138A         0.0         0.0         0.0   \n",
       "2      ENSG00000186092        OR4F5         0.0         0.0         0.0   \n",
       "3      ENSG00000238009   AL627309.1         0.0         0.0         0.0   \n",
       "4      ENSG00000239945   AL627309.3         0.0         0.0         0.0   \n",
       "...                ...          ...         ...         ...         ...   \n",
       "33533  ENSG00000277856   AC233755.2         0.0         0.0         0.0   \n",
       "33534  ENSG00000275063   AC233755.1         0.0         0.0         0.0   \n",
       "33535  ENSG00000271254   AC240274.1         0.0         0.0         0.0   \n",
       "33536  ENSG00000277475   AC213203.1         0.0         0.0         0.0   \n",
       "33537  ENSG00000268674      FAM231C         0.0         0.0         0.0   \n",
       "\n",
       "       GSM4904234  GSM4904234  GSM4904234  GSM4904234  GSM4904234  ...  \\\n",
       "0             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "1             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "2             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "3             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "4             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "...           ...         ...         ...         ...         ...  ...   \n",
       "33533         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33534         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33535         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33536         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33537         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "\n",
       "       GSM4904246  GSM4904246  GSM4904246  GSM4904246  GSM4904246  GSM4904246  \\\n",
       "0             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "33533         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33534         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33535         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33536         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33537         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "       GSM4904246  GSM4904246  GSM4904246  GSM4904246  \n",
       "0             0.0         0.0         0.0         0.0  \n",
       "1             0.0         0.0         0.0         0.0  \n",
       "2             0.0         0.0         0.0         0.0  \n",
       "3             0.0         0.0         0.0         0.0  \n",
       "4             0.0         0.0         0.0         0.0  \n",
       "...           ...         ...         ...         ...  \n",
       "33533         0.0         0.0         0.0         0.0  \n",
       "33534         0.0         0.0         0.0         0.0  \n",
       "33535         0.0         0.0         0.0         0.0  \n",
       "33536         0.0         0.0         0.0         0.0  \n",
       "33537         0.0         0.0         0.0         0.0  \n",
       "\n",
       "[33538 rows x 54784 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_df.columns = GSM_ids\n",
    "temp_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ProbeID</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904235</th>\n",
       "      <th>GSM4904236</th>\n",
       "      <th>GSM4904237</th>\n",
       "      <th>GSM4904238</th>\n",
       "      <th>GSM4904239</th>\n",
       "      <th>GSM4904240</th>\n",
       "      <th>GSM4904241</th>\n",
       "      <th>GSM4904242</th>\n",
       "      <th>GSM4904243</th>\n",
       "      <th>GSM4904244</th>\n",
       "      <th>GSM4904245</th>\n",
       "      <th>GSM4904246</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000243485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000237613</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000186092</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000238009</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000239945</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>ENSG00000277856</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>ENSG00000275063</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>ENSG00000271254</td>\n",
       "      <td>61.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>347.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>192.0</td>\n",
       "      <td>197.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>ENSG00000277475</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>ENSG00000268674</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               ProbeID  GSM4904234  GSM4904235  GSM4904236  GSM4904237  \\\n",
       "0      ENSG00000243485         0.0         0.0         0.0         0.0   \n",
       "1      ENSG00000237613         0.0         0.0         0.0         0.0   \n",
       "2      ENSG00000186092         0.0         1.0         0.0         0.0   \n",
       "3      ENSG00000238009         8.0         5.0        25.0         5.0   \n",
       "4      ENSG00000239945         0.0         1.0         3.0         0.0   \n",
       "...                ...         ...         ...         ...         ...   \n",
       "33533  ENSG00000277856         0.0         0.0         0.0         5.0   \n",
       "33534  ENSG00000275063         0.0         0.0         0.0         0.0   \n",
       "33535  ENSG00000271254        61.0       188.0       347.0        85.0   \n",
       "33536  ENSG00000277475         0.0         0.0         0.0         0.0   \n",
       "33537  ENSG00000268674         0.0         0.0         0.0         0.0   \n",
       "\n",
       "       GSM4904238  GSM4904239  GSM4904240  GSM4904241  GSM4904242  GSM4904243  \\\n",
       "0             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3            14.0        25.0        13.0        18.0         3.0         5.0   \n",
       "4             0.0         3.0         2.0         3.0         0.0         0.0   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "33533         0.0         4.0         0.0         0.0         1.0        49.0   \n",
       "33534         0.0         0.0         0.0         0.0         0.0         1.0   \n",
       "33535        77.0       192.0       197.0       101.0        73.0        53.0   \n",
       "33536         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33537         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "       GSM4904244  GSM4904245  GSM4904246  \n",
       "0             0.0         0.0         0.0  \n",
       "1             0.0         0.0         0.0  \n",
       "2             0.0         0.0         0.0  \n",
       "3             3.0         6.0         7.0  \n",
       "4             0.0         0.0         1.0  \n",
       "...           ...         ...         ...  \n",
       "33533         1.0        15.0         0.0  \n",
       "33534         0.0         3.0         4.0  \n",
       "33535         9.0        28.0        41.0  \n",
       "33536         0.0         0.0         0.0  \n",
       "33537         0.0         0.0         0.0  \n",
       "\n",
       "[33538 rows x 14 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bulk=pd.DataFrame()\n",
    "bulk[\"ProbeID\"]=list(temp_df[\"ProbeId\"])\n",
    "\n",
    "bulk['GSM4904234']=list(temp_df['GSM4904234'].sum(axis=1))\n",
    "bulk['GSM4904235']=list(temp_df['GSM4904235'].sum(axis=1))\n",
    "bulk['GSM4904236']=list(temp_df['GSM4904236'].sum(axis=1))\n",
    "bulk['GSM4904237']=list(temp_df['GSM4904237'].sum(axis=1))\n",
    "bulk['GSM4904238']=list(temp_df['GSM4904238'].sum(axis=1))\n",
    "bulk['GSM4904239']=list(temp_df['GSM4904239'].sum(axis=1))\n",
    "bulk['GSM4904240']=list(temp_df['GSM4904240'].sum(axis=1))\n",
    "bulk['GSM4904241']=list(temp_df['GSM4904241'].sum(axis=1))\n",
    "bulk['GSM4904242']=list(temp_df['GSM4904242'].sum(axis=1))\n",
    "bulk['GSM4904243']=list(temp_df['GSM4904243'].sum(axis=1))\n",
    "bulk['GSM4904244']=list(temp_df['GSM4904244'].sum(axis=1))\n",
    "bulk['GSM4904245']=list(temp_df['GSM4904245'].sum(axis=1))\n",
    "bulk['GSM4904246']=list(temp_df['GSM4904246'].sum(axis=1))\n",
    "bulk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/anndata/_core/anndata.py:119: ImplicitModificationWarning: Transforming to str index.\n",
      "  warnings.warn(\"Transforming to str index.\", ImplicitModificationWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ProbeID</th>\n",
       "      <th>Name</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904235</th>\n",
       "      <th>GSM4904236</th>\n",
       "      <th>GSM4904237</th>\n",
       "      <th>GSM4904238</th>\n",
       "      <th>GSM4904239</th>\n",
       "      <th>GSM4904240</th>\n",
       "      <th>GSM4904241</th>\n",
       "      <th>GSM4904242</th>\n",
       "      <th>GSM4904243</th>\n",
       "      <th>GSM4904244</th>\n",
       "      <th>GSM4904245</th>\n",
       "      <th>GSM4904246</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ENSG00000243485</td>\n",
       "      <td>MIR1302-2HG</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ENSG00000237613</td>\n",
       "      <td>FAM138A</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ENSG00000186092</td>\n",
       "      <td>OR4F5</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030968</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ENSG00000238009</td>\n",
       "      <td>AL627309.1</td>\n",
       "      <td>0.466167</td>\n",
       "      <td>0.148594</td>\n",
       "      <td>0.439811</td>\n",
       "      <td>0.294629</td>\n",
       "      <td>0.399044</td>\n",
       "      <td>0.500918</td>\n",
       "      <td>0.382648</td>\n",
       "      <td>0.768991</td>\n",
       "      <td>0.149395</td>\n",
       "      <td>0.347118</td>\n",
       "      <td>0.549455</td>\n",
       "      <td>0.486197</td>\n",
       "      <td>0.491218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ENSG00000239945</td>\n",
       "      <td>AL627309.3</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.030968</td>\n",
       "      <td>0.060423</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.070133</td>\n",
       "      <td>0.065887</td>\n",
       "      <td>0.160076</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.081268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>ENSG00000277856</td>\n",
       "      <td>AC233755.2</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.294629</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.092773</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.051537</td>\n",
       "      <td>1.874114</td>\n",
       "      <td>0.207282</td>\n",
       "      <td>1.001347</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>ENSG00000275063</td>\n",
       "      <td>AC233755.1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.076427</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.263484</td>\n",
       "      <td>0.300756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>ENSG00000271254</td>\n",
       "      <td>AC240274.1</td>\n",
       "      <td>1.966592</td>\n",
       "      <td>2.344592</td>\n",
       "      <td>2.572212</td>\n",
       "      <td>2.278486</td>\n",
       "      <td>1.460735</td>\n",
       "      <td>2.066287</td>\n",
       "      <td>2.486125</td>\n",
       "      <td>2.307620</td>\n",
       "      <td>1.869823</td>\n",
       "      <td>1.957312</td>\n",
       "      <td>1.257372</td>\n",
       "      <td>1.521129</td>\n",
       "      <td>1.755247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>ENSG00000277475</td>\n",
       "      <td>AC213203.1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>ENSG00000268674</td>\n",
       "      <td>FAM231C</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               ProbeID         Name  GSM4904234  GSM4904235  GSM4904236  \\\n",
       "0      ENSG00000243485  MIR1302-2HG    0.000000    0.000000    0.000000   \n",
       "1      ENSG00000237613      FAM138A    0.000000    0.000000    0.000000   \n",
       "2      ENSG00000186092        OR4F5    0.000000    0.030968    0.000000   \n",
       "3      ENSG00000238009   AL627309.1    0.466167    0.148594    0.439811   \n",
       "4      ENSG00000239945   AL627309.3    0.000000    0.030968    0.060423   \n",
       "...                ...          ...         ...         ...         ...   \n",
       "33533  ENSG00000277856   AC233755.2    0.000000    0.000000    0.000000   \n",
       "33534  ENSG00000275063   AC233755.1    0.000000    0.000000    0.000000   \n",
       "33535  ENSG00000271254   AC240274.1    1.966592    2.344592    2.572212   \n",
       "33536  ENSG00000277475   AC213203.1    0.000000    0.000000    0.000000   \n",
       "33537  ENSG00000268674      FAM231C    0.000000    0.000000    0.000000   \n",
       "\n",
       "       GSM4904237  GSM4904238  GSM4904239  GSM4904240  GSM4904241  GSM4904242  \\\n",
       "0        0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "1        0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "2        0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "3        0.294629    0.399044    0.500918    0.382648    0.768991    0.149395   \n",
       "4        0.000000    0.000000    0.070133    0.065887    0.160076    0.000000   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "33533    0.294629    0.000000    0.092773    0.000000    0.000000    0.051537   \n",
       "33534    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "33535    2.278486    1.460735    2.066287    2.486125    2.307620    1.869823   \n",
       "33536    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "33537    0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "\n",
       "       GSM4904243  GSM4904244  GSM4904245  GSM4904246  \n",
       "0        0.000000    0.000000    0.000000    0.000000  \n",
       "1        0.000000    0.000000    0.000000    0.000000  \n",
       "2        0.000000    0.000000    0.000000    0.000000  \n",
       "3        0.347118    0.549455    0.486197    0.491218  \n",
       "4        0.000000    0.000000    0.000000    0.081268  \n",
       "...           ...         ...         ...         ...  \n",
       "33533    1.874114    0.207282    1.001347    0.000000  \n",
       "33534    0.076427    0.000000    0.263484    0.300756  \n",
       "33535    1.957312    1.257372    1.521129    1.755247  \n",
       "33536    0.000000    0.000000    0.000000    0.000000  \n",
       "33537    0.000000    0.000000    0.000000    0.000000  \n",
       "\n",
       "[33538 rows x 15 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import GEOparse\n",
    "import pandas as pd\n",
    "import sqlite3\n",
    "import csv\n",
    "import os\n",
    "import sys\n",
    "import math\n",
    "import re\n",
    "import tempfile\n",
    "import statistics\n",
    "import argparse\n",
    "import pymongo\n",
    "import gzip\n",
    "import shutil\n",
    "import numpy as np\n",
    "import io\n",
    "import scanpy as sc\n",
    "import glob\n",
    "from anndata import AnnData\n",
    "\n",
    "expr = bulk.copy(deep=True)\n",
    "expr = expr.drop(['ProbeID'], axis=1)\n",
    "adata = AnnData(expr.T)\n",
    "sc.pp.normalize_total(adata, target_sum=1e6)\n",
    "sc.pp.log1p(adata,base=2)\n",
    "\n",
    "norm_df2 = pd.DataFrame(adata.X)\n",
    "norm_df2 = norm_df2.T\n",
    "norm_df2.insert(0, 'ProbeID', list(bulk['ProbeID']))\n",
    "\n",
    "norm_df2.columns=list(bulk.columns)\n",
    "norm_df2.insert(1, 'Name', list(temp_df['Name']))\n",
    "norm_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Name</th>\n",
       "      <th>index</th>\n",
       "      <th>MIR1302-2HG</th>\n",
       "      <th>FAM138A</th>\n",
       "      <th>OR4F5</th>\n",
       "      <th>AL627309.1</th>\n",
       "      <th>AL627309.3</th>\n",
       "      <th>AL627309.2</th>\n",
       "      <th>AL627309.4</th>\n",
       "      <th>AL732372.1</th>\n",
       "      <th>OR4F29</th>\n",
       "      <th>...</th>\n",
       "      <th>AC007325.2</th>\n",
       "      <th>BX072566.1</th>\n",
       "      <th>AL354822.1</th>\n",
       "      <th>AC023491.2</th>\n",
       "      <th>AC004556.1</th>\n",
       "      <th>AC233755.2</th>\n",
       "      <th>AC233755.1</th>\n",
       "      <th>AC240274.1</th>\n",
       "      <th>AC213203.1</th>\n",
       "      <th>FAM231C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GSM4904234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GSM4904234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GSM4904234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GSM4904234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GSM4904234</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2699</th>\n",
       "      <td>GSM4904246</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2700</th>\n",
       "      <td>GSM4904246</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2701</th>\n",
       "      <td>GSM4904246</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2702</th>\n",
       "      <td>GSM4904246</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2703</th>\n",
       "      <td>GSM4904246</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2704 rows × 33539 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Name       index  MIR1302-2HG  FAM138A  OR4F5  AL627309.1  AL627309.3  \\\n",
       "0     GSM4904234          0.0      0.0    0.0         0.0         0.0   \n",
       "1     GSM4904234          0.0      0.0    0.0         0.0         0.0   \n",
       "2     GSM4904234          0.0      0.0    0.0         0.0         0.0   \n",
       "3     GSM4904234          0.0      0.0    0.0         0.0         0.0   \n",
       "4     GSM4904234          0.0      0.0    0.0         0.0         0.0   \n",
       "...          ...          ...      ...    ...         ...         ...   \n",
       "2699  GSM4904246          0.0      0.0    0.0         0.0         0.0   \n",
       "2700  GSM4904246          0.0      0.0    0.0         0.0         0.0   \n",
       "2701  GSM4904246          0.0      0.0    0.0         0.0         0.0   \n",
       "2702  GSM4904246          0.0      0.0    0.0         0.0         0.0   \n",
       "2703  GSM4904246          0.0      0.0    0.0         0.0         0.0   \n",
       "\n",
       "Name  AL627309.2  AL627309.4  AL732372.1  OR4F29  ...  AC007325.2  BX072566.1  \\\n",
       "0            0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "1            0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "2            0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "3            0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "4            0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "...          ...         ...         ...     ...  ...         ...         ...   \n",
       "2699         0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "2700         0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "2701         0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "2702         0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "2703         0.0         0.0         0.0     0.0  ...         0.0         0.0   \n",
       "\n",
       "Name  AL354822.1  AC023491.2  AC004556.1  AC233755.2  AC233755.1  AC240274.1  \\\n",
       "0            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1            0.0         0.0         1.0         0.0         0.0         0.0   \n",
       "2            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3            0.0         0.0         1.0         0.0         0.0         0.0   \n",
       "4            0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "...          ...         ...         ...         ...         ...         ...   \n",
       "2699         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2700         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2701         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2702         0.0         0.0         1.0         0.0         0.0         0.0   \n",
       "2703         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "Name  AC213203.1  FAM231C  \n",
       "0            0.0      0.0  \n",
       "1            0.0      0.0  \n",
       "2            0.0      0.0  \n",
       "3            0.0      0.0  \n",
       "4            0.0      0.0  \n",
       "...          ...      ...  \n",
       "2699         0.0      0.0  \n",
       "2700         0.0      0.0  \n",
       "2701         0.0      0.0  \n",
       "2702         0.0      0.0  \n",
       "2703         0.0      0.0  \n",
       "\n",
       "[2704 rows x 33539 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_df2=temp_df.copy(deep=True)\n",
    "temp_df2=temp_df2.drop([\"ProbeId\"],axis=1)\n",
    "df_T = temp_df2.set_index('Name').T\n",
    "df_mac = df_T.loc[(df_T['FCER1G'] > 2.0) & (df_T['TYROBP'] > 2.0)]\n",
    "df_mac=df_mac.reset_index()\n",
    "df_mac"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>index</th>\n",
       "      <th>Name</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>GSM4904234</th>\n",
       "      <th>...</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "      <th>GSM4904246</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MIR1302-2HG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAM138A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OR4F5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AL627309.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AL627309.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>AC233755.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>AC233755.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>AC240274.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>AC213203.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>FAM231C</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 2705 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "index         Name  GSM4904234  GSM4904234  GSM4904234  GSM4904234  \\\n",
       "0      MIR1302-2HG         0.0         0.0         0.0         0.0   \n",
       "1          FAM138A         0.0         0.0         0.0         0.0   \n",
       "2            OR4F5         0.0         0.0         0.0         0.0   \n",
       "3       AL627309.1         0.0         0.0         0.0         0.0   \n",
       "4       AL627309.3         0.0         0.0         0.0         0.0   \n",
       "...            ...         ...         ...         ...         ...   \n",
       "33533   AC233755.2         0.0         0.0         0.0         0.0   \n",
       "33534   AC233755.1         0.0         0.0         0.0         0.0   \n",
       "33535   AC240274.1         0.0         0.0         0.0         0.0   \n",
       "33536   AC213203.1         0.0         0.0         0.0         0.0   \n",
       "33537      FAM231C         0.0         0.0         0.0         0.0   \n",
       "\n",
       "index  GSM4904234  GSM4904234  GSM4904234  GSM4904234  GSM4904234  ...  \\\n",
       "0             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "1             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "2             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "3             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "4             0.0         0.0         0.0         0.0         0.0  ...   \n",
       "...           ...         ...         ...         ...         ...  ...   \n",
       "33533         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33534         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33535         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33536         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "33537         0.0         0.0         0.0         0.0         0.0  ...   \n",
       "\n",
       "index  GSM4904246  GSM4904246  GSM4904246  GSM4904246  GSM4904246  GSM4904246  \\\n",
       "0             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "1             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "2             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "3             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "4             0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "...           ...         ...         ...         ...         ...         ...   \n",
       "33533         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33534         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33535         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33536         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "33537         0.0         0.0         0.0         0.0         0.0         0.0   \n",
       "\n",
       "index  GSM4904246  GSM4904246  GSM4904246  GSM4904246  \n",
       "0             0.0         0.0         0.0         0.0  \n",
       "1             0.0         0.0         0.0         0.0  \n",
       "2             0.0         0.0         0.0         0.0  \n",
       "3             0.0         0.0         0.0         0.0  \n",
       "4             0.0         0.0         0.0         0.0  \n",
       "...           ...         ...         ...         ...  \n",
       "33533         0.0         0.0         0.0         0.0  \n",
       "33534         0.0         0.0         0.0         0.0  \n",
       "33535         0.0         0.0         0.0         0.0  \n",
       "33536         0.0         0.0         0.0         0.0  \n",
       "33537         0.0         0.0         0.0         0.0  \n",
       "\n",
       "[33538 rows x 2705 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_T2 = df_mac.set_index('index').T\n",
    "df_T2=df_T2.reset_index()\n",
    "df_T2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/anndata/_core/anndata.py:119: ImplicitModificationWarning: Transforming to str index.\n",
      "  warnings.warn(\"Transforming to str index.\", ImplicitModificationWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ProbeId</th>\n",
       "      <th>GSM4904234_1</th>\n",
       "      <th>GSM4904234_2</th>\n",
       "      <th>GSM4904234_3</th>\n",
       "      <th>GSM4904234_4</th>\n",
       "      <th>GSM4904234_5</th>\n",
       "      <th>GSM4904234_6</th>\n",
       "      <th>GSM4904234_7</th>\n",
       "      <th>GSM4904234_8</th>\n",
       "      <th>GSM4904234_9</th>\n",
       "      <th>...</th>\n",
       "      <th>GSM4904246_2695</th>\n",
       "      <th>GSM4904246_2696</th>\n",
       "      <th>GSM4904246_2697</th>\n",
       "      <th>GSM4904246_2698</th>\n",
       "      <th>GSM4904246_2699</th>\n",
       "      <th>GSM4904246_2700</th>\n",
       "      <th>GSM4904246_2701</th>\n",
       "      <th>GSM4904246_2702</th>\n",
       "      <th>GSM4904246_2703</th>\n",
       "      <th>GSM4904246_2704</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MIR1302-2HG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAM138A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OR4F5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AL627309.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AL627309.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>AC233755.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>AC233755.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>AC240274.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>AC213203.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>FAM231C</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 2705 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ProbeId  GSM4904234_1  GSM4904234_2  GSM4904234_3  GSM4904234_4  \\\n",
       "0      MIR1302-2HG           0.0           0.0           0.0           0.0   \n",
       "1          FAM138A           0.0           0.0           0.0           0.0   \n",
       "2            OR4F5           0.0           0.0           0.0           0.0   \n",
       "3       AL627309.1           0.0           0.0           0.0           0.0   \n",
       "4       AL627309.3           0.0           0.0           0.0           0.0   \n",
       "...            ...           ...           ...           ...           ...   \n",
       "33533   AC233755.2           0.0           0.0           0.0           0.0   \n",
       "33534   AC233755.1           0.0           0.0           0.0           0.0   \n",
       "33535   AC240274.1           0.0           0.0           0.0           0.0   \n",
       "33536   AC213203.1           0.0           0.0           0.0           0.0   \n",
       "33537      FAM231C           0.0           0.0           0.0           0.0   \n",
       "\n",
       "       GSM4904234_5  GSM4904234_6  GSM4904234_7  GSM4904234_8  GSM4904234_9  \\\n",
       "0               0.0           0.0           0.0           0.0           0.0   \n",
       "1               0.0           0.0           0.0           0.0           0.0   \n",
       "2               0.0           0.0           0.0           0.0           0.0   \n",
       "3               0.0           0.0           0.0           0.0           0.0   \n",
       "4               0.0           0.0           0.0           0.0           0.0   \n",
       "...             ...           ...           ...           ...           ...   \n",
       "33533           0.0           0.0           0.0           0.0           0.0   \n",
       "33534           0.0           0.0           0.0           0.0           0.0   \n",
       "33535           0.0           0.0           0.0           0.0           0.0   \n",
       "33536           0.0           0.0           0.0           0.0           0.0   \n",
       "33537           0.0           0.0           0.0           0.0           0.0   \n",
       "\n",
       "       ...  GSM4904246_2695  GSM4904246_2696  GSM4904246_2697  \\\n",
       "0      ...              0.0              0.0              0.0   \n",
       "1      ...              0.0              0.0              0.0   \n",
       "2      ...              0.0              0.0              0.0   \n",
       "3      ...              0.0              0.0              0.0   \n",
       "4      ...              0.0              0.0              0.0   \n",
       "...    ...              ...              ...              ...   \n",
       "33533  ...              0.0              0.0              0.0   \n",
       "33534  ...              0.0              0.0              0.0   \n",
       "33535  ...              0.0              0.0              0.0   \n",
       "33536  ...              0.0              0.0              0.0   \n",
       "33537  ...              0.0              0.0              0.0   \n",
       "\n",
       "       GSM4904246_2698  GSM4904246_2699  GSM4904246_2700  GSM4904246_2701  \\\n",
       "0                  0.0              0.0              0.0              0.0   \n",
       "1                  0.0              0.0              0.0              0.0   \n",
       "2                  0.0              0.0              0.0              0.0   \n",
       "3                  0.0              0.0              0.0              0.0   \n",
       "4                  0.0              0.0              0.0              0.0   \n",
       "...                ...              ...              ...              ...   \n",
       "33533              0.0              0.0              0.0              0.0   \n",
       "33534              0.0              0.0              0.0              0.0   \n",
       "33535              0.0              0.0              0.0              0.0   \n",
       "33536              0.0              0.0              0.0              0.0   \n",
       "33537              0.0              0.0              0.0              0.0   \n",
       "\n",
       "       GSM4904246_2702  GSM4904246_2703  GSM4904246_2704  \n",
       "0                  0.0              0.0              0.0  \n",
       "1                  0.0              0.0              0.0  \n",
       "2                  0.0              0.0              0.0  \n",
       "3                  0.0              0.0              0.0  \n",
       "4                  0.0              0.0              0.0  \n",
       "...                ...              ...              ...  \n",
       "33533              0.0              0.0              0.0  \n",
       "33534              0.0              0.0              0.0  \n",
       "33535              0.0              0.0              0.0  \n",
       "33536              0.0              0.0              0.0  \n",
       "33537              0.0              0.0              0.0  \n",
       "\n",
       "[33538 rows x 2705 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mac3=df_T2\n",
    "cols = [\"ProbeId\"]\n",
    "count = 1\n",
    "for column in df_T2.columns[1:]:\n",
    "    cols.append(f'{column}_{count}')\n",
    "    count+=1\n",
    "\n",
    "df_mac3.columns = cols\n",
    "\n",
    "expr = df_mac3.copy(deep=True)\n",
    "expr = expr.drop(['ProbeId'], axis=1)\n",
    "adata = AnnData(expr.T)\n",
    "sc.pp.normalize_total(adata, target_sum=1e6)\n",
    "sc.pp.log1p(adata,base=2)\n",
    "\n",
    "norm_df2 = pd.DataFrame(adata.X)\n",
    "norm_df2 = norm_df2.T\n",
    "norm_df2.insert(0, 'ProbeID', list(df_mac3['ProbeId']))\n",
    "norm_df2.columns=list(df_mac3.columns)\n",
    "norm_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['GSM4904235_28',\n",
       " 'GSM4904235_29',\n",
       " 'GSM4904235_30',\n",
       " 'GSM4904235_31',\n",
       " 'GSM4904235_32',\n",
       " 'GSM4904235_33',\n",
       " 'GSM4904235_34',\n",
       " 'GSM4904235_35',\n",
       " 'GSM4904235_36',\n",
       " 'GSM4904235_37',\n",
       " 'GSM4904235_38',\n",
       " 'GSM4904235_39',\n",
       " 'GSM4904235_40',\n",
       " 'GSM4904235_41',\n",
       " 'GSM4904235_42',\n",
       " 'GSM4904235_43',\n",
       " 'GSM4904235_44',\n",
       " 'GSM4904235_45',\n",
       " 'GSM4904235_46',\n",
       " 'GSM4904235_47',\n",
       " 'GSM4904235_48',\n",
       " 'GSM4904235_49',\n",
       " 'GSM4904235_50',\n",
       " 'GSM4904235_51',\n",
       " 'GSM4904235_52',\n",
       " 'GSM4904235_53',\n",
       " 'GSM4904235_54',\n",
       " 'GSM4904235_55',\n",
       " 'GSM4904235_56',\n",
       " 'GSM4904235_57',\n",
       " 'GSM4904235_58',\n",
       " 'GSM4904235_59',\n",
       " 'GSM4904235_60',\n",
       " 'GSM4904235_61',\n",
       " 'GSM4904235_62',\n",
       " 'GSM4904235_63',\n",
       " 'GSM4904235_64',\n",
       " 'GSM4904235_65',\n",
       " 'GSM4904235_66',\n",
       " 'GSM4904235_67',\n",
       " 'GSM4904235_68',\n",
       " 'GSM4904235_69',\n",
       " 'GSM4904235_70',\n",
       " 'GSM4904235_71',\n",
       " 'GSM4904235_72',\n",
       " 'GSM4904235_73',\n",
       " 'GSM4904235_74',\n",
       " 'GSM4904235_75',\n",
       " 'GSM4904235_76',\n",
       " 'GSM4904235_77',\n",
       " 'GSM4904235_78',\n",
       " 'GSM4904235_79',\n",
       " 'GSM4904235_80',\n",
       " 'GSM4904235_81',\n",
       " 'GSM4904235_82',\n",
       " 'GSM4904235_83',\n",
       " 'GSM4904235_84',\n",
       " 'GSM4904235_85',\n",
       " 'GSM4904235_86',\n",
       " 'GSM4904235_87',\n",
       " 'GSM4904235_88',\n",
       " 'GSM4904235_89',\n",
       " 'GSM4904235_90',\n",
       " 'GSM4904235_91',\n",
       " 'GSM4904235_92',\n",
       " 'GSM4904235_93',\n",
       " 'GSM4904235_94',\n",
       " 'GSM4904238_403',\n",
       " 'GSM4904238_404',\n",
       " 'GSM4904238_405',\n",
       " 'GSM4904238_406',\n",
       " 'GSM4904238_407',\n",
       " 'GSM4904238_408',\n",
       " 'GSM4904238_409',\n",
       " 'GSM4904238_410',\n",
       " 'GSM4904238_411',\n",
       " 'GSM4904238_412',\n",
       " 'GSM4904238_413',\n",
       " 'GSM4904238_414',\n",
       " 'GSM4904238_415',\n",
       " 'GSM4904238_416',\n",
       " 'GSM4904238_417',\n",
       " 'GSM4904238_418',\n",
       " 'GSM4904238_419',\n",
       " 'GSM4904238_420',\n",
       " 'GSM4904238_421',\n",
       " 'GSM4904238_422',\n",
       " 'GSM4904238_423',\n",
       " 'GSM4904238_424',\n",
       " 'GSM4904238_425',\n",
       " 'GSM4904238_426',\n",
       " 'GSM4904238_427',\n",
       " 'GSM4904238_428',\n",
       " 'GSM4904238_429',\n",
       " 'GSM4904238_430',\n",
       " 'GSM4904238_431',\n",
       " 'GSM4904238_432',\n",
       " 'GSM4904238_433',\n",
       " 'GSM4904238_434',\n",
       " 'GSM4904238_435',\n",
       " 'GSM4904238_436',\n",
       " 'GSM4904238_437',\n",
       " 'GSM4904238_438',\n",
       " 'GSM4904238_439',\n",
       " 'GSM4904238_440',\n",
       " 'GSM4904238_441',\n",
       " 'GSM4904238_442',\n",
       " 'GSM4904238_443',\n",
       " 'GSM4904238_444',\n",
       " 'GSM4904238_445',\n",
       " 'GSM4904238_446',\n",
       " 'GSM4904238_447',\n",
       " 'GSM4904238_448',\n",
       " 'GSM4904238_449',\n",
       " 'GSM4904238_450',\n",
       " 'GSM4904238_451',\n",
       " 'GSM4904238_452',\n",
       " 'GSM4904238_453',\n",
       " 'GSM4904238_454',\n",
       " 'GSM4904238_455',\n",
       " 'GSM4904238_456',\n",
       " 'GSM4904238_457',\n",
       " 'GSM4904238_458',\n",
       " 'GSM4904238_459',\n",
       " 'GSM4904238_460',\n",
       " 'GSM4904238_461',\n",
       " 'GSM4904238_462',\n",
       " 'GSM4904238_463',\n",
       " 'GSM4904238_464',\n",
       " 'GSM4904238_465',\n",
       " 'GSM4904238_466',\n",
       " 'GSM4904238_467',\n",
       " 'GSM4904238_468',\n",
       " 'GSM4904238_469',\n",
       " 'GSM4904238_470',\n",
       " 'GSM4904238_471',\n",
       " 'GSM4904238_472',\n",
       " 'GSM4904238_473',\n",
       " 'GSM4904238_474',\n",
       " 'GSM4904238_475',\n",
       " 'GSM4904238_476',\n",
       " 'GSM4904238_477',\n",
       " 'GSM4904238_478',\n",
       " 'GSM4904238_479',\n",
       " 'GSM4904238_480',\n",
       " 'GSM4904238_481',\n",
       " 'GSM4904238_482',\n",
       " 'GSM4904238_483',\n",
       " 'GSM4904238_484',\n",
       " 'GSM4904238_485',\n",
       " 'GSM4904238_486',\n",
       " 'GSM4904238_487',\n",
       " 'GSM4904238_488',\n",
       " 'GSM4904238_489',\n",
       " 'GSM4904238_490',\n",
       " 'GSM4904238_491',\n",
       " 'GSM4904238_492',\n",
       " 'GSM4904238_493',\n",
       " 'GSM4904238_494',\n",
       " 'GSM4904238_495',\n",
       " 'GSM4904238_496',\n",
       " 'GSM4904238_497',\n",
       " 'GSM4904238_498',\n",
       " 'GSM4904238_499',\n",
       " 'GSM4904238_500',\n",
       " 'GSM4904238_501',\n",
       " 'GSM4904238_502',\n",
       " 'GSM4904238_503',\n",
       " 'GSM4904238_504',\n",
       " 'GSM4904238_505',\n",
       " 'GSM4904238_506',\n",
       " 'GSM4904238_507',\n",
       " 'GSM4904238_508',\n",
       " 'GSM4904238_509',\n",
       " 'GSM4904238_510',\n",
       " 'GSM4904238_511',\n",
       " 'GSM4904238_512',\n",
       " 'GSM4904238_513',\n",
       " 'GSM4904238_514',\n",
       " 'GSM4904238_515',\n",
       " 'GSM4904238_516',\n",
       " 'GSM4904238_517',\n",
       " 'GSM4904238_518',\n",
       " 'GSM4904238_519',\n",
       " 'GSM4904238_520',\n",
       " 'GSM4904238_521',\n",
       " 'GSM4904238_522',\n",
       " 'GSM4904238_523',\n",
       " 'GSM4904238_524',\n",
       " 'GSM4904238_525',\n",
       " 'GSM4904238_526',\n",
       " 'GSM4904238_527',\n",
       " 'GSM4904238_528',\n",
       " 'GSM4904238_529',\n",
       " 'GSM4904238_530',\n",
       " 'GSM4904238_531',\n",
       " 'GSM4904238_532',\n",
       " 'GSM4904238_533',\n",
       " 'GSM4904238_534',\n",
       " 'GSM4904238_535',\n",
       " 'GSM4904238_536',\n",
       " 'GSM4904238_537',\n",
       " 'GSM4904238_538',\n",
       " 'GSM4904238_539',\n",
       " 'GSM4904238_540',\n",
       " 'GSM4904238_541',\n",
       " 'GSM4904238_542',\n",
       " 'GSM4904238_543',\n",
       " 'GSM4904238_544',\n",
       " 'GSM4904238_545',\n",
       " 'GSM4904238_546',\n",
       " 'GSM4904238_547',\n",
       " 'GSM4904238_548',\n",
       " 'GSM4904238_549',\n",
       " 'GSM4904238_550',\n",
       " 'GSM4904238_551',\n",
       " 'GSM4904238_552',\n",
       " 'GSM4904238_553',\n",
       " 'GSM4904238_554',\n",
       " 'GSM4904238_555',\n",
       " 'GSM4904238_556',\n",
       " 'GSM4904238_557',\n",
       " 'GSM4904238_558',\n",
       " 'GSM4904238_559',\n",
       " 'GSM4904238_560',\n",
       " 'GSM4904238_561',\n",
       " 'GSM4904238_562',\n",
       " 'GSM4904238_563',\n",
       " 'GSM4904238_564',\n",
       " 'GSM4904238_565',\n",
       " 'GSM4904238_566',\n",
       " 'GSM4904238_567',\n",
       " 'GSM4904238_568',\n",
       " 'GSM4904238_569',\n",
       " 'GSM4904238_570',\n",
       " 'GSM4904238_571',\n",
       " 'GSM4904238_572',\n",
       " 'GSM4904238_573',\n",
       " 'GSM4904238_574',\n",
       " 'GSM4904238_575',\n",
       " 'GSM4904238_576',\n",
       " 'GSM4904238_577',\n",
       " 'GSM4904238_578',\n",
       " 'GSM4904238_579',\n",
       " 'GSM4904238_580',\n",
       " 'GSM4904238_581',\n",
       " 'GSM4904238_582',\n",
       " 'GSM4904238_583',\n",
       " 'GSM4904238_584',\n",
       " 'GSM4904238_585',\n",
       " 'GSM4904238_586',\n",
       " 'GSM4904238_587',\n",
       " 'GSM4904238_588',\n",
       " 'GSM4904238_589',\n",
       " 'GSM4904238_590',\n",
       " 'GSM4904238_591',\n",
       " 'GSM4904238_592',\n",
       " 'GSM4904238_593',\n",
       " 'GSM4904238_594',\n",
       " 'GSM4904238_595',\n",
       " 'GSM4904238_596',\n",
       " 'GSM4904238_597',\n",
       " 'GSM4904238_598',\n",
       " 'GSM4904238_599',\n",
       " 'GSM4904238_600',\n",
       " 'GSM4904238_601',\n",
       " 'GSM4904238_602',\n",
       " 'GSM4904238_603',\n",
       " 'GSM4904238_604',\n",
       " 'GSM4904238_605',\n",
       " 'GSM4904238_606',\n",
       " 'GSM4904238_607',\n",
       " 'GSM4904238_608',\n",
       " 'GSM4904238_609',\n",
       " 'GSM4904238_610',\n",
       " 'GSM4904238_611',\n",
       " 'GSM4904238_612',\n",
       " 'GSM4904238_613',\n",
       " 'GSM4904238_614',\n",
       " 'GSM4904238_615',\n",
       " 'GSM4904238_616',\n",
       " 'GSM4904238_617',\n",
       " 'GSM4904238_618',\n",
       " 'GSM4904238_619',\n",
       " 'GSM4904238_620',\n",
       " 'GSM4904238_621',\n",
       " 'GSM4904238_622',\n",
       " 'GSM4904238_623',\n",
       " 'GSM4904238_624',\n",
       " 'GSM4904238_625',\n",
       " 'GSM4904238_626',\n",
       " 'GSM4904238_627',\n",
       " 'GSM4904238_628',\n",
       " 'GSM4904238_629',\n",
       " 'GSM4904238_630',\n",
       " 'GSM4904238_631',\n",
       " 'GSM4904238_632',\n",
       " 'GSM4904238_633',\n",
       " 'GSM4904238_634',\n",
       " 'GSM4904238_635',\n",
       " 'GSM4904238_636',\n",
       " 'GSM4904238_637',\n",
       " 'GSM4904238_638',\n",
       " 'GSM4904238_639',\n",
       " 'GSM4904238_640',\n",
       " 'GSM4904238_641',\n",
       " 'GSM4904238_642',\n",
       " 'GSM4904238_643',\n",
       " 'GSM4904238_644',\n",
       " 'GSM4904238_645',\n",
       " 'GSM4904238_646',\n",
       " 'GSM4904238_647',\n",
       " 'GSM4904238_648',\n",
       " 'GSM4904238_649',\n",
       " 'GSM4904238_650',\n",
       " 'GSM4904238_651',\n",
       " 'GSM4904238_652',\n",
       " 'GSM4904238_653',\n",
       " 'GSM4904238_654',\n",
       " 'GSM4904238_655',\n",
       " 'GSM4904238_656',\n",
       " 'GSM4904238_657',\n",
       " 'GSM4904238_658',\n",
       " 'GSM4904238_659',\n",
       " 'GSM4904238_660',\n",
       " 'GSM4904238_661',\n",
       " 'GSM4904238_662',\n",
       " 'GSM4904238_663',\n",
       " 'GSM4904238_664',\n",
       " 'GSM4904238_665',\n",
       " 'GSM4904238_666',\n",
       " 'GSM4904238_667',\n",
       " 'GSM4904238_668',\n",
       " 'GSM4904238_669',\n",
       " 'GSM4904241_1514',\n",
       " 'GSM4904241_1515',\n",
       " 'GSM4904241_1516',\n",
       " 'GSM4904241_1517',\n",
       " 'GSM4904241_1518',\n",
       " 'GSM4904241_1519',\n",
       " 'GSM4904241_1520',\n",
       " 'GSM4904241_1521',\n",
       " 'GSM4904241_1522',\n",
       " 'GSM4904241_1523',\n",
       " 'GSM4904241_1524',\n",
       " 'GSM4904241_1525',\n",
       " 'GSM4904241_1526',\n",
       " 'GSM4904241_1527',\n",
       " 'GSM4904241_1528',\n",
       " 'GSM4904241_1529',\n",
       " 'GSM4904241_1530',\n",
       " 'GSM4904241_1531',\n",
       " 'GSM4904241_1532',\n",
       " 'GSM4904241_1533',\n",
       " 'GSM4904241_1534',\n",
       " 'GSM4904241_1535',\n",
       " 'GSM4904241_1536',\n",
       " 'GSM4904241_1537',\n",
       " 'GSM4904241_1538',\n",
       " 'GSM4904241_1539',\n",
       " 'GSM4904241_1540',\n",
       " 'GSM4904241_1541',\n",
       " 'GSM4904241_1542',\n",
       " 'GSM4904241_1543',\n",
       " 'GSM4904241_1544',\n",
       " 'GSM4904241_1545',\n",
       " 'GSM4904241_1546',\n",
       " 'GSM4904241_1547',\n",
       " 'GSM4904241_1548',\n",
       " 'GSM4904241_1549',\n",
       " 'GSM4904241_1550',\n",
       " 'GSM4904241_1551',\n",
       " 'GSM4904241_1552',\n",
       " 'GSM4904241_1553',\n",
       " 'GSM4904241_1554',\n",
       " 'GSM4904241_1555',\n",
       " 'GSM4904241_1556',\n",
       " 'GSM4904241_1557',\n",
       " 'GSM4904241_1558',\n",
       " 'GSM4904241_1559',\n",
       " 'GSM4904241_1560',\n",
       " 'GSM4904241_1561',\n",
       " 'GSM4904241_1562',\n",
       " 'GSM4904241_1563',\n",
       " 'GSM4904241_1564',\n",
       " 'GSM4904241_1565',\n",
       " 'GSM4904241_1566',\n",
       " 'GSM4904241_1567',\n",
       " 'GSM4904241_1568',\n",
       " 'GSM4904241_1569',\n",
       " 'GSM4904241_1570',\n",
       " 'GSM4904241_1571',\n",
       " 'GSM4904241_1572',\n",
       " 'GSM4904241_1573',\n",
       " 'GSM4904241_1574',\n",
       " 'GSM4904241_1575',\n",
       " 'GSM4904241_1576',\n",
       " 'GSM4904241_1577',\n",
       " 'GSM4904241_1578',\n",
       " 'GSM4904241_1579',\n",
       " 'GSM4904241_1580',\n",
       " 'GSM4904241_1581',\n",
       " 'GSM4904241_1582',\n",
       " 'GSM4904241_1583',\n",
       " 'GSM4904241_1584',\n",
       " 'GSM4904241_1585',\n",
       " 'GSM4904241_1586',\n",
       " 'GSM4904241_1587',\n",
       " 'GSM4904241_1588',\n",
       " 'GSM4904241_1589',\n",
       " 'GSM4904241_1590',\n",
       " 'GSM4904241_1591',\n",
       " 'GSM4904241_1592',\n",
       " 'GSM4904241_1593',\n",
       " 'GSM4904241_1594',\n",
       " 'GSM4904241_1595',\n",
       " 'GSM4904241_1596',\n",
       " 'GSM4904241_1597',\n",
       " 'GSM4904241_1598',\n",
       " 'GSM4904241_1599',\n",
       " 'GSM4904241_1600',\n",
       " 'GSM4904241_1601',\n",
       " 'GSM4904241_1602',\n",
       " 'GSM4904241_1603',\n",
       " 'GSM4904241_1604',\n",
       " 'GSM4904241_1605',\n",
       " 'GSM4904241_1606',\n",
       " 'GSM4904241_1607',\n",
       " 'GSM4904241_1608',\n",
       " 'GSM4904241_1609',\n",
       " 'GSM4904241_1610',\n",
       " 'GSM4904241_1611',\n",
       " 'GSM4904241_1612',\n",
       " 'GSM4904241_1613',\n",
       " 'GSM4904241_1614',\n",
       " 'GSM4904241_1615',\n",
       " 'GSM4904241_1616',\n",
       " 'GSM4904241_1617',\n",
       " 'GSM4904241_1618',\n",
       " 'GSM4904241_1619',\n",
       " 'GSM4904241_1620',\n",
       " 'GSM4904241_1621',\n",
       " 'GSM4904241_1622',\n",
       " 'GSM4904241_1623',\n",
       " 'GSM4904241_1624',\n",
       " 'GSM4904241_1625',\n",
       " 'GSM4904241_1626',\n",
       " 'GSM4904242_1627',\n",
       " 'GSM4904242_1628',\n",
       " 'GSM4904242_1629',\n",
       " 'GSM4904242_1630',\n",
       " 'GSM4904242_1631',\n",
       " 'GSM4904242_1632',\n",
       " 'GSM4904242_1633',\n",
       " 'GSM4904242_1634',\n",
       " 'GSM4904242_1635',\n",
       " 'GSM4904242_1636',\n",
       " 'GSM4904242_1637',\n",
       " 'GSM4904242_1638',\n",
       " 'GSM4904242_1639',\n",
       " 'GSM4904242_1640',\n",
       " 'GSM4904242_1641',\n",
       " 'GSM4904242_1642',\n",
       " 'GSM4904242_1643',\n",
       " 'GSM4904242_1644',\n",
       " 'GSM4904242_1645',\n",
       " 'GSM4904242_1646',\n",
       " 'GSM4904242_1647',\n",
       " 'GSM4904242_1648',\n",
       " 'GSM4904242_1649',\n",
       " 'GSM4904242_1650',\n",
       " 'GSM4904242_1651',\n",
       " 'GSM4904242_1652',\n",
       " 'GSM4904242_1653',\n",
       " 'GSM4904242_1654',\n",
       " 'GSM4904242_1655',\n",
       " 'GSM4904242_1656',\n",
       " 'GSM4904242_1657',\n",
       " 'GSM4904242_1658',\n",
       " 'GSM4904242_1659',\n",
       " 'GSM4904242_1660',\n",
       " 'GSM4904242_1661',\n",
       " 'GSM4904242_1662',\n",
       " 'GSM4904242_1663',\n",
       " 'GSM4904242_1664',\n",
       " 'GSM4904242_1665',\n",
       " 'GSM4904242_1666',\n",
       " 'GSM4904242_1667',\n",
       " 'GSM4904242_1668',\n",
       " 'GSM4904242_1669',\n",
       " 'GSM4904242_1670',\n",
       " 'GSM4904242_1671',\n",
       " 'GSM4904242_1672',\n",
       " 'GSM4904242_1673',\n",
       " 'GSM4904242_1674',\n",
       " 'GSM4904242_1675',\n",
       " 'GSM4904242_1676',\n",
       " 'GSM4904242_1677',\n",
       " 'GSM4904242_1678',\n",
       " 'GSM4904242_1679',\n",
       " 'GSM4904242_1680',\n",
       " 'GSM4904242_1681',\n",
       " 'GSM4904242_1682',\n",
       " 'GSM4904242_1683',\n",
       " 'GSM4904242_1684',\n",
       " 'GSM4904242_1685',\n",
       " 'GSM4904242_1686',\n",
       " 'GSM4904242_1687',\n",
       " 'GSM4904242_1688',\n",
       " 'GSM4904242_1689',\n",
       " 'GSM4904242_1690',\n",
       " 'GSM4904242_1691',\n",
       " 'GSM4904242_1692',\n",
       " 'GSM4904242_1693',\n",
       " 'GSM4904242_1694',\n",
       " 'GSM4904242_1695',\n",
       " 'GSM4904242_1696',\n",
       " 'GSM4904242_1697',\n",
       " 'GSM4904242_1698',\n",
       " 'GSM4904242_1699',\n",
       " 'GSM4904242_1700',\n",
       " 'GSM4904242_1701',\n",
       " 'GSM4904242_1702',\n",
       " 'GSM4904242_1703',\n",
       " 'GSM4904242_1704',\n",
       " 'GSM4904242_1705',\n",
       " 'GSM4904242_1706',\n",
       " 'GSM4904242_1707',\n",
       " 'GSM4904242_1708',\n",
       " 'GSM4904242_1709',\n",
       " 'GSM4904242_1710',\n",
       " 'GSM4904242_1711',\n",
       " 'GSM4904242_1712',\n",
       " 'GSM4904242_1713',\n",
       " 'GSM4904242_1714',\n",
       " 'GSM4904242_1715',\n",
       " 'GSM4904242_1716',\n",
       " 'GSM4904242_1717',\n",
       " 'GSM4904242_1718',\n",
       " 'GSM4904242_1719',\n",
       " 'GSM4904242_1720',\n",
       " 'GSM4904242_1721',\n",
       " 'GSM4904242_1722',\n",
       " 'GSM4904242_1723',\n",
       " 'GSM4904242_1724',\n",
       " 'GSM4904242_1725',\n",
       " 'GSM4904242_1726',\n",
       " 'GSM4904242_1727',\n",
       " 'GSM4904242_1728',\n",
       " 'GSM4904242_1729',\n",
       " 'GSM4904242_1730',\n",
       " 'GSM4904242_1731',\n",
       " 'GSM4904242_1732',\n",
       " 'GSM4904242_1733',\n",
       " 'GSM4904242_1734',\n",
       " 'GSM4904242_1735',\n",
       " 'GSM4904242_1736',\n",
       " 'GSM4904242_1737',\n",
       " 'GSM4904242_1738',\n",
       " 'GSM4904242_1739',\n",
       " 'GSM4904242_1740',\n",
       " 'GSM4904242_1741',\n",
       " 'GSM4904242_1742',\n",
       " 'GSM4904242_1743',\n",
       " 'GSM4904243_1744',\n",
       " 'GSM4904243_1745',\n",
       " 'GSM4904243_1746',\n",
       " 'GSM4904243_1747',\n",
       " 'GSM4904243_1748',\n",
       " 'GSM4904243_1749',\n",
       " 'GSM4904243_1750',\n",
       " 'GSM4904243_1751',\n",
       " 'GSM4904243_1752',\n",
       " 'GSM4904243_1753',\n",
       " 'GSM4904243_1754',\n",
       " 'GSM4904243_1755',\n",
       " 'GSM4904243_1756',\n",
       " 'GSM4904243_1757',\n",
       " 'GSM4904243_1758',\n",
       " 'GSM4904243_1759',\n",
       " 'GSM4904243_1760',\n",
       " 'GSM4904243_1761',\n",
       " 'GSM4904243_1762',\n",
       " 'GSM4904243_1763',\n",
       " 'GSM4904243_1764',\n",
       " 'GSM4904243_1765',\n",
       " 'GSM4904243_1766',\n",
       " 'GSM4904243_1767',\n",
       " 'GSM4904243_1768',\n",
       " 'GSM4904243_1769',\n",
       " 'GSM4904243_1770',\n",
       " 'GSM4904243_1771',\n",
       " 'GSM4904243_1772',\n",
       " 'GSM4904243_1773',\n",
       " 'GSM4904243_1774',\n",
       " 'GSM4904243_1775',\n",
       " 'GSM4904243_1776',\n",
       " 'GSM4904243_1777',\n",
       " 'GSM4904243_1778',\n",
       " 'GSM4904243_1779',\n",
       " 'GSM4904243_1780',\n",
       " 'GSM4904243_1781',\n",
       " 'GSM4904243_1782',\n",
       " 'GSM4904243_1783',\n",
       " 'GSM4904243_1784',\n",
       " 'GSM4904243_1785',\n",
       " 'GSM4904243_1786',\n",
       " 'GSM4904243_1787',\n",
       " 'GSM4904243_1788',\n",
       " 'GSM4904243_1789',\n",
       " 'GSM4904243_1790',\n",
       " 'GSM4904243_1791',\n",
       " 'GSM4904243_1792',\n",
       " 'GSM4904243_1793',\n",
       " 'GSM4904243_1794',\n",
       " 'GSM4904243_1795',\n",
       " 'GSM4904243_1796',\n",
       " 'GSM4904243_1797',\n",
       " 'GSM4904243_1798',\n",
       " 'GSM4904243_1799',\n",
       " 'GSM4904243_1800',\n",
       " 'GSM4904243_1801',\n",
       " 'GSM4904243_1802',\n",
       " 'GSM4904243_1803',\n",
       " 'GSM4904243_1804',\n",
       " 'GSM4904243_1805',\n",
       " 'GSM4904243_1806',\n",
       " 'GSM4904243_1807',\n",
       " 'GSM4904243_1808',\n",
       " 'GSM4904243_1809',\n",
       " 'GSM4904243_1810',\n",
       " 'GSM4904243_1811',\n",
       " 'GSM4904243_1812',\n",
       " 'GSM4904243_1813',\n",
       " 'GSM4904243_1814',\n",
       " 'GSM4904243_1815',\n",
       " 'GSM4904243_1816',\n",
       " 'GSM4904243_1817',\n",
       " 'GSM4904243_1818',\n",
       " 'GSM4904243_1819',\n",
       " 'GSM4904243_1820',\n",
       " 'GSM4904243_1821',\n",
       " 'GSM4904243_1822',\n",
       " 'GSM4904243_1823',\n",
       " 'GSM4904243_1824',\n",
       " 'GSM4904243_1825',\n",
       " 'GSM4904243_1826',\n",
       " 'GSM4904243_1827',\n",
       " 'GSM4904243_1828',\n",
       " 'GSM4904243_1829',\n",
       " 'GSM4904243_1830',\n",
       " 'GSM4904243_1831',\n",
       " 'GSM4904243_1832',\n",
       " 'GSM4904243_1833',\n",
       " 'GSM4904243_1834',\n",
       " 'GSM4904243_1835',\n",
       " 'GSM4904243_1836',\n",
       " 'GSM4904243_1837',\n",
       " 'GSM4904243_1838',\n",
       " 'GSM4904243_1839',\n",
       " 'GSM4904243_1840',\n",
       " 'GSM4904243_1841',\n",
       " 'GSM4904243_1842',\n",
       " 'GSM4904243_1843',\n",
       " 'GSM4904243_1844',\n",
       " 'GSM4904243_1845',\n",
       " 'GSM4904243_1846',\n",
       " 'GSM4904243_1847',\n",
       " 'GSM4904243_1848',\n",
       " 'GSM4904243_1849',\n",
       " 'GSM4904244_1850',\n",
       " 'GSM4904244_1851',\n",
       " 'GSM4904244_1852',\n",
       " 'GSM4904244_1853',\n",
       " 'GSM4904244_1854',\n",
       " 'GSM4904244_1855',\n",
       " 'GSM4904244_1856',\n",
       " 'GSM4904244_1857',\n",
       " 'GSM4904244_1858',\n",
       " 'GSM4904244_1859',\n",
       " 'GSM4904244_1860',\n",
       " 'GSM4904244_1861',\n",
       " 'GSM4904244_1862',\n",
       " 'GSM4904244_1863',\n",
       " 'GSM4904244_1864',\n",
       " 'GSM4904244_1865',\n",
       " 'GSM4904244_1866',\n",
       " 'GSM4904244_1867',\n",
       " 'GSM4904244_1868',\n",
       " 'GSM4904244_1869',\n",
       " 'GSM4904244_1870',\n",
       " 'GSM4904244_1871',\n",
       " 'GSM4904244_1872',\n",
       " 'GSM4904244_1873',\n",
       " 'GSM4904244_1874',\n",
       " 'GSM4904244_1875',\n",
       " 'GSM4904244_1876',\n",
       " 'GSM4904244_1877',\n",
       " 'GSM4904244_1878',\n",
       " 'GSM4904244_1879',\n",
       " 'GSM4904244_1880',\n",
       " 'GSM4904244_1881',\n",
       " 'GSM4904244_1882',\n",
       " 'GSM4904244_1883',\n",
       " 'GSM4904244_1884',\n",
       " 'GSM4904244_1885',\n",
       " 'GSM4904244_1886',\n",
       " 'GSM4904244_1887',\n",
       " 'GSM4904244_1888',\n",
       " 'GSM4904244_1889',\n",
       " 'GSM4904244_1890',\n",
       " 'GSM4904244_1891',\n",
       " 'GSM4904244_1892',\n",
       " 'GSM4904244_1893',\n",
       " 'GSM4904244_1894',\n",
       " 'GSM4904244_1895',\n",
       " 'GSM4904244_1896',\n",
       " 'GSM4904244_1897',\n",
       " 'GSM4904244_1898',\n",
       " 'GSM4904244_1899',\n",
       " 'GSM4904244_1900',\n",
       " 'GSM4904244_1901',\n",
       " 'GSM4904244_1902',\n",
       " 'GSM4904244_1903',\n",
       " 'GSM4904244_1904',\n",
       " 'GSM4904244_1905',\n",
       " 'GSM4904244_1906',\n",
       " 'GSM4904244_1907',\n",
       " 'GSM4904244_1908',\n",
       " 'GSM4904244_1909',\n",
       " 'GSM4904244_1910',\n",
       " 'GSM4904244_1911',\n",
       " 'GSM4904244_1912',\n",
       " 'GSM4904244_1913',\n",
       " 'GSM4904244_1914',\n",
       " 'GSM4904244_1915',\n",
       " 'GSM4904244_1916',\n",
       " 'GSM4904244_1917',\n",
       " 'GSM4904244_1918',\n",
       " 'GSM4904244_1919',\n",
       " 'GSM4904244_1920',\n",
       " 'GSM4904244_1921',\n",
       " 'GSM4904244_1922',\n",
       " 'GSM4904244_1923',\n",
       " 'GSM4904244_1924',\n",
       " 'GSM4904244_1925',\n",
       " 'GSM4904244_1926',\n",
       " 'GSM4904244_1927',\n",
       " 'GSM4904244_1928',\n",
       " 'GSM4904244_1929',\n",
       " 'GSM4904244_1930',\n",
       " 'GSM4904244_1931',\n",
       " 'GSM4904244_1932',\n",
       " 'GSM4904244_1933',\n",
       " 'GSM4904244_1934',\n",
       " 'GSM4904244_1935',\n",
       " 'GSM4904244_1936',\n",
       " 'GSM4904244_1937',\n",
       " 'GSM4904244_1938',\n",
       " 'GSM4904244_1939',\n",
       " 'GSM4904244_1940',\n",
       " 'GSM4904244_1941',\n",
       " 'GSM4904244_1942',\n",
       " 'GSM4904244_1943',\n",
       " 'GSM4904244_1944',\n",
       " 'GSM4904244_1945',\n",
       " 'GSM4904244_1946',\n",
       " 'GSM4904244_1947',\n",
       " 'GSM4904244_1948',\n",
       " 'GSM4904244_1949',\n",
       " 'GSM4904244_1950',\n",
       " 'GSM4904244_1951',\n",
       " 'GSM4904244_1952',\n",
       " 'GSM4904244_1953',\n",
       " 'GSM4904244_1954',\n",
       " 'GSM4904244_1955',\n",
       " 'GSM4904244_1956',\n",
       " 'GSM4904244_1957',\n",
       " 'GSM4904244_1958',\n",
       " 'GSM4904244_1959',\n",
       " 'GSM4904244_1960',\n",
       " 'GSM4904244_1961',\n",
       " 'GSM4904244_1962',\n",
       " 'GSM4904244_1963']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mac4=df_T2.copy(deep=True)\n",
    "df_mac4\n",
    "\n",
    "columns_to_drop=[]\n",
    "\n",
    "Border_GSM=['GSM4904235','GSM4904238','GSM4904241','GSM4904242','GSM4904243','GSM4904244']\n",
    "\n",
    "for column in df_mac4.columns[1:]:\n",
    "    GSM=column.split(\"_\")[0]\n",
    "    if GSM in Border_GSM:\n",
    "        columns_to_drop.append(column)\n",
    "columns_to_drop   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/anndata/_core/anndata.py:119: ImplicitModificationWarning: Transforming to str index.\n",
      "  warnings.warn(\"Transforming to str index.\", ImplicitModificationWarning)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ProbeId</th>\n",
       "      <th>GSM4904234_1</th>\n",
       "      <th>GSM4904234_2</th>\n",
       "      <th>GSM4904234_3</th>\n",
       "      <th>GSM4904234_4</th>\n",
       "      <th>GSM4904234_5</th>\n",
       "      <th>GSM4904234_6</th>\n",
       "      <th>GSM4904234_7</th>\n",
       "      <th>GSM4904234_8</th>\n",
       "      <th>GSM4904234_9</th>\n",
       "      <th>...</th>\n",
       "      <th>GSM4904246_2695</th>\n",
       "      <th>GSM4904246_2696</th>\n",
       "      <th>GSM4904246_2697</th>\n",
       "      <th>GSM4904246_2698</th>\n",
       "      <th>GSM4904246_2699</th>\n",
       "      <th>GSM4904246_2700</th>\n",
       "      <th>GSM4904246_2701</th>\n",
       "      <th>GSM4904246_2702</th>\n",
       "      <th>GSM4904246_2703</th>\n",
       "      <th>GSM4904246_2704</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MIR1302-2HG</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FAM138A</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OR4F5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AL627309.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AL627309.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33533</th>\n",
       "      <td>AC233755.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33534</th>\n",
       "      <td>AC233755.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33535</th>\n",
       "      <td>AC240274.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33536</th>\n",
       "      <td>AC213203.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33537</th>\n",
       "      <td>FAM231C</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>33538 rows × 1921 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ProbeId  GSM4904234_1  GSM4904234_2  GSM4904234_3  GSM4904234_4  \\\n",
       "0      MIR1302-2HG           0.0           0.0           0.0           0.0   \n",
       "1          FAM138A           0.0           0.0           0.0           0.0   \n",
       "2            OR4F5           0.0           0.0           0.0           0.0   \n",
       "3       AL627309.1           0.0           0.0           0.0           0.0   \n",
       "4       AL627309.3           0.0           0.0           0.0           0.0   \n",
       "...            ...           ...           ...           ...           ...   \n",
       "33533   AC233755.2           0.0           0.0           0.0           0.0   \n",
       "33534   AC233755.1           0.0           0.0           0.0           0.0   \n",
       "33535   AC240274.1           0.0           0.0           0.0           0.0   \n",
       "33536   AC213203.1           0.0           0.0           0.0           0.0   \n",
       "33537      FAM231C           0.0           0.0           0.0           0.0   \n",
       "\n",
       "       GSM4904234_5  GSM4904234_6  GSM4904234_7  GSM4904234_8  GSM4904234_9  \\\n",
       "0               0.0           0.0           0.0           0.0           0.0   \n",
       "1               0.0           0.0           0.0           0.0           0.0   \n",
       "2               0.0           0.0           0.0           0.0           0.0   \n",
       "3               0.0           0.0           0.0           0.0           0.0   \n",
       "4               0.0           0.0           0.0           0.0           0.0   \n",
       "...             ...           ...           ...           ...           ...   \n",
       "33533           0.0           0.0           0.0           0.0           0.0   \n",
       "33534           0.0           0.0           0.0           0.0           0.0   \n",
       "33535           0.0           0.0           0.0           0.0           0.0   \n",
       "33536           0.0           0.0           0.0           0.0           0.0   \n",
       "33537           0.0           0.0           0.0           0.0           0.0   \n",
       "\n",
       "       ...  GSM4904246_2695  GSM4904246_2696  GSM4904246_2697  \\\n",
       "0      ...              0.0              0.0              0.0   \n",
       "1      ...              0.0              0.0              0.0   \n",
       "2      ...              0.0              0.0              0.0   \n",
       "3      ...              0.0              0.0              0.0   \n",
       "4      ...              0.0              0.0              0.0   \n",
       "...    ...              ...              ...              ...   \n",
       "33533  ...              0.0              0.0              0.0   \n",
       "33534  ...              0.0              0.0              0.0   \n",
       "33535  ...              0.0              0.0              0.0   \n",
       "33536  ...              0.0              0.0              0.0   \n",
       "33537  ...              0.0              0.0              0.0   \n",
       "\n",
       "       GSM4904246_2698  GSM4904246_2699  GSM4904246_2700  GSM4904246_2701  \\\n",
       "0                  0.0              0.0              0.0              0.0   \n",
       "1                  0.0              0.0              0.0              0.0   \n",
       "2                  0.0              0.0              0.0              0.0   \n",
       "3                  0.0              0.0              0.0              0.0   \n",
       "4                  0.0              0.0              0.0              0.0   \n",
       "...                ...              ...              ...              ...   \n",
       "33533              0.0              0.0              0.0              0.0   \n",
       "33534              0.0              0.0              0.0              0.0   \n",
       "33535              0.0              0.0              0.0              0.0   \n",
       "33536              0.0              0.0              0.0              0.0   \n",
       "33537              0.0              0.0              0.0              0.0   \n",
       "\n",
       "       GSM4904246_2702  GSM4904246_2703  GSM4904246_2704  \n",
       "0                  0.0              0.0              0.0  \n",
       "1                  0.0              0.0              0.0  \n",
       "2                  0.0              0.0              0.0  \n",
       "3                  0.0              0.0              0.0  \n",
       "4                  0.0              0.0              0.0  \n",
       "...                ...              ...              ...  \n",
       "33533              0.0              0.0              0.0  \n",
       "33534              0.0              0.0              0.0  \n",
       "33535              0.0              0.0              0.0  \n",
       "33536              0.0              0.0              0.0  \n",
       "33537              0.0              0.0              0.0  \n",
       "\n",
       "[33538 rows x 1921 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mac4=df_mac4.drop(columns_to_drop, axis=1)\n",
    "\n",
    "expr = df_mac4.copy(deep=True)\n",
    "expr = expr.drop(['ProbeId'], axis=1)\n",
    "adata = AnnData(expr.T)\n",
    "sc.pp.normalize_total(adata, target_sum=1e6)\n",
    "sc.pp.log1p(adata,base=2)\n",
    "\n",
    "norm_df3 = pd.DataFrame(adata.X)\n",
    "norm_df3 = norm_df3.T\n",
    "norm_df3.insert(0, 'ProbeID', list(df_mac4['ProbeId']))\n",
    "norm_df3.columns=list(df_mac4.columns)\n",
    "norm_df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "tumor_types={\"GSM4904234\":'Tumor',\"GSM4904235\":\"Adenoma\",\"GSM4904236\":\"Tumor\",\n",
    "            \"GSM4904237\":\"Normal\",\"GSM4904238\":\"Adenoma\",\"GSM4904239\":\"Tumor\",\n",
    "            \"GSM4904240\":\"Normal\",\"GSM4904241\":\"Para-Cancer\",\"GSM4904242\":\"Adenoma\",\n",
    "            \"GSM4904243\":\"Adenoma\",\"GSM4904244\":\"Blood\",\"GSM4904245\":\"Tumor\",\n",
    "            \"GSM4904246\":\"Normal\"}\n",
    "list_of_tumor2=[]\n",
    "for element in list(df_mac4.columns)[1:]:\n",
    "    GSM=element.split(\"_\")[0]\n",
    "    list_of_tumor2.append(tumor_types[GSM])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Variable names are not unique. To make them unique, call `.var_names_make_unique`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4228, 4200, 2, 3123, 3289, 168, 14, 4252, 440, 51, 30, 14, 4207, 4200, 2, 7516, 25, 116, 78, 74, 122, 142, 4198, 2, 4250, 66, 2, 8, 144, 107, 14]\n",
      "[66]\n",
      "[48]\n",
      "[-1]\n",
      "[47]\n",
      "[4228, 4200, 2, 3123, 3289, 168, 14, 4252, 440, 51, 30, 14, 4207, 4200, 2, 7516, 25, 116, 78, 74, 122, 142, 4198, 2, 4250, 66, 2, 8, 144, 107, 14]\n",
      "[144, 168]\n",
      "[137, 153]\n",
      "[1, 2]\n",
      "[113, 122]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 1920 × 33538\n",
       "    obs: 'tumor', 'c13', 'c14_3', 'c14', 'c3'"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from anndata import AnnData\n",
    "import scanpy as sc\n",
    "\n",
    "gene_names2=list(norm_df3[\"ProbeId\"])\n",
    "\n",
    "adata3 = AnnData(norm_df3.set_index('ProbeId').T)\n",
    "adata3.raw = adata3\n",
    "adata3.raw.var['gene_symbols'] = gene_names2\n",
    "adata3.raw.var['gene_ids'] = gene_names2\n",
    "adata3.obs[\"tumor\"]=list_of_tumor2\n",
    "\n",
    "computeSMART(adata3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[18.18327453066367, 947.0415525979109, 17.68327453066367, 18.68327453066367]\n",
      "[-228.64319438401174, 870.8691713698316, -229.14319438401174, -228.14319438401174]\n",
      "Counter({'Tumor': 32, 'Normal': 19}) Counter({'Normal': 1170, 'Tumor': 750})\n",
      "Counter({'Normal': 333, 'Tumor': 130}) Counter({'Normal': 1170, 'Tumor': 750})\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotdf = sc.get.obs_df(adata3, keys=[\"c13\", \"c14_3\", 'tumor'])\n",
    "\n",
    "\n",
    "ahash = {'Tumor':acolor[1],'Normal':acolor[0]}\n",
    "\n",
    "thr1 = hu.getThrData(plotdf['c13'])\n",
    "thr2 = hu.getThrData(plotdf['c14_3'])\n",
    "    \n",
    "print(thr1)\n",
    "print(thr2)\n",
    "c1 = (plotdf['c13'] <= thr1[0])\n",
    "c2 = (plotdf['c14_3'] <= thr2[0])\n",
    "\n",
    "c3 = (plotdf['c13'] > thr1[0])\n",
    "c4 = (plotdf['c14_3'] > thr2[0])\n",
    "\n",
    "# Second StepMiner\n",
    "\n",
    "thr3 = hu.getThrData(plotdf[c3]['c13'])\n",
    "c5 = (plotdf['c13'] <= thr3[0])\n",
    "c6 = (plotdf['c13'] > thr3[0])\n",
    "\n",
    "\n",
    "thr4 = hu.getThrData(plotdf[c2]['c14_3'])\n",
    "c7 = (plotdf['c14_3'] <= thr4[0])\n",
    "c8 = (plotdf['c14_3'] > thr4[0])\n",
    "\n",
    "\n",
    "plotdf['color'] = [ahash[k] for k in plotdf['tumor']]\n",
    "ax=plotdf.plot.scatter(\"c13\", \"c14_3\", c=\"color\", alpha=0.5, rasterized=True)\n",
    "ax.axhline(y=thr4[0], color='cyan')\n",
    "ax.axvline(x=thr3[0], color='cyan')\n",
    "\n",
    "\n",
    "print(Counter(plotdf[c5 & c7]['tumor']), Counter(plotdf['tumor']))\n",
    "print(Counter(plotdf[c6 & c8]['tumor']), Counter(plotdf['tumor']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.562065210941044e-13\n",
      "3.293388076201618e-17\n"
     ]
    }
   ],
   "source": [
    "from statsmodels.stats.proportion import proportions_ztest\n",
    "stats, pval=proportions_ztest(19, 1170, 32/750)\n",
    "print(pval)\n",
    "from statsmodels.stats.proportion import proportions_ztest\n",
    "stats, pval=proportions_ztest(333, 1170, 130/750)\n",
    "print(pval)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
